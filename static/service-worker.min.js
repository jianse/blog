!function(){"use strict";try{self["workbox:core:6.1.5"]&&_()}catch(e){}const e={"invalid-value":({paramName:e,validValueDescription:t,value:a})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(a)}.`},"not-an-array":({moduleName:e,className:t,funcName:a,paramName:r})=>{if(!(e&&t&&a&&r))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${r}' passed into '${e}.${t}.${a}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:a,className:r,funcName:s})=>{if(!(e&&t&&a&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${a}.${r?r+".":""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:a,className:r,funcName:s,isReturnValueProblem:n})=>{if(!e||!a||!s)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${a}.${r?r+".":""}${s}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${a}.${r?r+".":""}${s}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:a,className:r,funcName:s})=>{if(!(e&&t&&a&&r&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${a}.${r}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:a,paramName:r})=>`The supplied '${r}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${a} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:a,className:r,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${a}.${r}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${a}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.statuses or config.headersin ${e}.${t}.${a}`,"invalid-string":({moduleName:e,funcName:t,paramName:a})=>{if(!a||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${a}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:a})=>`The start (${t}) and end (${a}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let a=`The strategy could not generate a response for '${e}'.`;return t&&(a+=` The underlying error is ${t}.`),a},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},t=(t,a={})=>{const r=e[t];if(!r)throw new Error(`Unable to find message for code '${t}'.`);return r(a)};class a extends Error{constructor(e,a){super(t(e,a)),this.name=e,this.details=a}}const r=(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new a("missing-a-method",r)},s=(e,t)=>{if(!Array.isArray(e))throw new a("not-an-array",t)},n=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new a("incorrect-class",r)},o=(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new a("invalid-value",r)},i=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new a("incorrect-type",r)},c=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},a=function(a,r){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===a&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[a](...r);const s=e?[]:["%cworkbox",[`background: ${t[a]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[a](...s,...r),"groupCollapsed"===a&&(e=!0),"groupEnd"===a&&(e=!1)},r={},s=Object.keys(t);for(const e of s){const t=e;r[t]=(...e)=>{a(t,e)}}return r})(),u={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},h=e=>[u.prefix,e,u.suffix].filter((e=>e&&e.length>0)).join("-"),l=e=>e||h(u.runtime),d=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");function p(e,t){const a=new URL(e);for(const e of t)a.searchParams.delete(e);return a.href}class m{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const g=new Set;try{self["workbox:strategies:6.1.5"]&&_()}catch(e){}function f(e){return"string"==typeof e?new Request(e):e}class w{constructor(e,t){this._cacheKeys={},n(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new m,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let r=f(e);if("navigate"===r.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return c.log(`Using a preloaded navigation response for '${d(r.url)}'`),e}const s=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:t})}catch(e){throw new a("plugin-error-request-will-fetch",{thrownError:e})}const n=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),c.debug(`Network request for '${d(r.url)}' returned a response with status '${e.status}'.`);for(const a of this.iterateCallbacks("fetchDidSucceed"))e=await a({event:t,request:n,response:e});return e}catch(e){throw c.log(`Network request for '${d(r.url)}' threw an error.`,e),s&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:s.clone(),request:n.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),a=t.clone();return this.waitUntil(this.cachePut(e,a)),t}async cacheMatch(e){const t=f(e);let a;const{cacheName:r,matchOptions:s}=this._strategy,n=await this.getCacheKey(t,"read"),o={...s,cacheName:r};a=await caches.match(n,o),a?c.debug(`Found a cached response in '${r}'.`):c.debug(`No cached response found in '${r}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))a=await e({cacheName:r,matchOptions:s,cachedResponse:a,request:n,event:this.event})||void 0;return a}async cachePut(e,t){const r=f(e);var s;await(s=0,new Promise((e=>setTimeout(e,s))));const n=await this.getCacheKey(r,"write");if(n.method&&"GET"!==n.method)throw new a("attempt-to-cache-non-get-request",{url:d(n.url),method:n.method});if(!t)throw c.error(`Cannot cache non-existent response for '${d(n.url)}'.`),new a("cache-put-with-no-response",{url:d(n.url)});const o=await this._ensureResponseSafeToCache(t);if(!o)return c.debug(`Response '${d(n.url)}' will not be cached.`,o),!1;const{cacheName:i,matchOptions:u}=this._strategy,h=await self.caches.open(i),l=this.hasCallback("cacheDidUpdate"),m=l?await async function(e,t,a,r){const s=p(t.url,a);if(t.url===s)return e.match(t,r);const n={...r,ignoreSearch:!0},o=await e.keys(t,n);for(const t of o)if(s===p(t.url,a))return e.match(t,r)}(h,n.clone(),["__WB_REVISION__"],u):null;c.debug(`Updating the '${i}' cache with a new Response for ${d(n.url)}.`);try{await h.put(n,l?o.clone():o)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){c.log(`About to run ${g.size} callbacks to clean up caches.`);for(const e of g)await e(),c.log(e,"is complete.");c.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:i,oldResponse:m,newResponse:o.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){if(!this._cacheKeys[t]){let a=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))a=f(await e({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[t]=a}return this._cacheKeys[t]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const a of this.iterateCallbacks(e))await a(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const a=this._pluginStateMap.get(t),r=r=>{const s={...r,state:a};return t[e](s)};yield r}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve()}async _ensureResponseSafeToCache(e){let t=e,a=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,a=!0,!t)break;return a||(t&&200!==t.status&&(t=void 0),t&&200!==t.status&&(0===t.status?c.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):c.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class N{constructor(e={}){this.cacheName=l(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,a="string"==typeof e.request?new Request(e.request):e.request,r="params"in e?e.params:void 0,s=new w(this,{event:t,request:a,params:r}),n=this._getResponse(s,a,t);return[n,this._awaitComplete(n,s,a,t)]}async _getResponse(e,t,r){let s;await e.runCallbacks("handlerWillStart",{event:r,request:t});try{if(s=await this._handle(t,e),!s||"error"===s.type)throw new a("no-response",{url:t.url})}catch(a){for(const n of e.iterateCallbacks("handlerDidError"))if(s=await n({error:a,event:r,request:t}),s)break;if(!s)throw a;c.log(`While responding to '${d(t.url)}', an ${a} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const a of e.iterateCallbacks("handlerWillRespond"))s=await a({event:r,request:t,response:s});return s}async _awaitComplete(e,t,a,r){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:r,request:a,response:s}),await t.doneWaiting()}catch(e){n=e}if(await t.runCallbacks("handlerDidComplete",{event:r,request:a,response:s,error:n}),t.destroy(),n)throw n}}const y=(e,t)=>`Using ${e} to respond to '${d(t.url)}'`,b=e=>{e&&(c.groupCollapsed("View the final response here."),c.log(e||"[No response returned]"),c.groupEnd())};class x extends N{async _handle(e,t){const r=[];n(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let s,o=await t.cacheMatch(e);if(o)r.push(`Found a cached response in the '${this.cacheName}' cache.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{o=await t.fetchAndCachePut(e)}catch(e){s=e}o?r.push("Got response from network."):r.push("Unable to get a response from the network.")}c.groupCollapsed(y(this.constructor.name,e));for(const e of r)c.log(e);if(b(o),c.groupEnd(),!o)throw new a("no-response",{url:e.url,error:s});return o}}const v={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};class R extends N{constructor(e){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(v)}async _handle(e,t){const r=[];n(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"request"});const s=t.fetchAndCachePut(e).catch((()=>{}));let o,i=await t.cacheMatch(e);if(i)r.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);try{i=await s}catch(e){o=e}}c.groupCollapsed(y(this.constructor.name,e));for(const e of r)c.log(e);if(b(i),c.groupEnd(),!i)throw new a("no-response",{url:e.url,error:o});return i}}try{self["workbox:routing:6.1.5"]&&_()}catch(e){}const E=["DELETE","GET","HEAD","PATCH","POST","PUT"],$=e=>e&&"object"==typeof e?(r(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(i(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class k{constructor(e,t,a="GET"){i(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),a&&o(a,E,{paramName:"method"}),this.handler=$(t),this.match=e,this.method=a}setCatchHandler(e){this.catchHandler=$(e)}}class q extends k{constructor(e,t,a){n(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:t})=>{const a=e.exec(t.href);if(a){if(t.origin===location.origin||0===a.index)return a.slice(1);c.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${t}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,a)}}class C{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,a=this.handleRequest({request:t,event:e});a&&e.respondWith(a)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;c.debug("Caching URLs from the window",t.urlsToCache);const a=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const a=new Request(...t);return this.handleRequest({request:a,event:e})})));e.waitUntil(a),e.ports&&e.ports[0]&&a.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){n(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const a=new URL(e.url,location.href);if(!a.protocol.startsWith("http"))return void c.debug("Workbox Router only supports URLs that start with 'http'.");const r=a.origin===location.origin,{params:s,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:r,url:a});let i=o&&o.handler;const u=[];i&&(u.push(["Found a route to handle this request:",o]),s&&u.push(["Passing the following params to the route's handler:",s]));const h=e.method;if(!i&&this._defaultHandlerMap.has(h)&&(u.push(`Failed to find a matching route. Falling back to the default handler for ${h}.`),i=this._defaultHandlerMap.get(h)),!i)return void c.debug(`No route found for: ${d(a)}`);let l;c.groupCollapsed(`Router is responding to: ${d(a)}`),u.forEach((e=>{Array.isArray(e)?c.log(...e):c.log(e)})),c.groupEnd();try{l=i.handle({url:a,request:e,event:t,params:s})}catch(e){l=Promise.reject(e)}const p=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||p)&&(l=l.catch((async r=>{if(p){c.groupCollapsed(`Error thrown when responding to:  ${d(a)}. Falling back to route's Catch Handler.`),c.error("Error thrown by:",o),c.error(r),c.groupEnd();try{return await p.handle({url:a,request:e,event:t,params:s})}catch(e){r=e}}if(this._catchHandler)return c.groupCollapsed(`Error thrown when responding to:  ${d(a)}. Falling back to global Catch Handler.`),c.error("Error thrown by:",o),c.error(r),c.groupEnd(),this._catchHandler.handle({url:a,request:e,event:t});throw r}))),l}findMatchingRoute({url:e,sameOrigin:t,request:a,event:r}){const s=this._routes.get(a.method)||[];for(const n of s){let s;const o=n.match({url:e,sameOrigin:t,request:a,event:r});if(o)return o instanceof Promise&&c.warn(`While routing ${d(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),s=o,(Array.isArray(o)&&0===o.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(s=void 0),{route:n,params:s}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,$(e))}setCatchHandler(e){this._catchHandler=$(e)}registerRoute(e){i(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),r(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),i(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),r(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),i(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new a("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new a("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let T;const U=()=>(T||(T=new C,T.addFetchListener(),T.addCacheListener()),T);function A(e,t,r){let s;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new a("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?n.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(t)&&c.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}s=new k((({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&c.debug(`${e} only partially matches the cross-origin URL ${t}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===n.href)),t,r)}else if(e instanceof RegExp)s=new q(e,t,r);else if("function"==typeof e)s=new k(e,t,r);else{if(!(e instanceof k))throw new a("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});s=e}return U().registerRoute(s),s}try{self["workbox:cacheable-response:6.1.5"]&&_()}catch(e){}class S{constructor(e={}){if(!e.statuses&&!e.headers)throw new a("statuses-or-headers-required",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor"});e.statuses&&s(e.statuses,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.statuses"}),e.headers&&i(e.headers,"object",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.headers"}),this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){n(e,Response,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"isResponseCacheable",paramName:"response"});let t=!0;if(this._statuses&&(t=this._statuses.includes(e.status)),this._headers&&t&&(t=Object.keys(this._headers).some((t=>e.headers.get(t)===this._headers[t]))),!t){c.groupCollapsed(`The request for '${d(e.url)}' returned a response that does not meet the criteria for being cached.`),c.groupCollapsed("View cacheability criteria here."),c.log("Cacheable statuses: "+JSON.stringify(this._statuses)),c.log("Cacheable headers: "+JSON.stringify(this._headers,null,2)),c.groupEnd();const t={};e.headers.forEach(((e,a)=>{t[a]=e})),c.groupCollapsed("View response status and headers here."),c.log("Response status: "+e.status),c.log("Response headers: "+JSON.stringify(t,null,2)),c.groupEnd(),c.groupCollapsed("View full response details here."),c.log(e.headers),c.log(e),c.groupEnd(),c.groupEnd()}return t}}class P{constructor(e){this.cacheWillUpdate=async({response:e})=>this._cacheableResponse.isResponseCacheable(e)?e:null,this._cacheableResponse=new S(e)}}function D(e){e.then((()=>{}))}class O{constructor(e,t,{onupgradeneeded:a,onversionchange:r}={}){this._db=null,this._name=e,this._version=t,this._onupgradeneeded=a,this._onversionchange=r||(()=>this.close())}get db(){return this._db}async open(){if(!this._db)return this._db=await new Promise(((e,t)=>{let a=!1;setTimeout((()=>{a=!0,t(new Error("The open request was blocked and timed out"))}),this.OPEN_TIMEOUT);const r=indexedDB.open(this._name,this._version);r.onerror=()=>t(r.error),r.onupgradeneeded=e=>{a?(r.transaction.abort(),r.result.close()):"function"==typeof this._onupgradeneeded&&this._onupgradeneeded(e)},r.onsuccess=()=>{const t=r.result;a?t.close():(t.onversionchange=this._onversionchange.bind(this),e(t))}})),this}async getKey(e,t){return(await this.getAllKeys(e,t,1))[0]}async getAll(e,t,a){return await this.getAllMatching(e,{query:t,count:a})}async getAllKeys(e,t,a){return(await this.getAllMatching(e,{query:t,count:a,includeKeys:!0})).map((e=>e.key))}async getAllMatching(e,{index:t,query:a=null,direction:r="next",count:s,includeKeys:n=!1}={}){return await this.transaction([e],"readonly",((o,i)=>{const c=o.objectStore(e),u=t?c.index(t):c,h=[],l=u.openCursor(a,r);l.onsuccess=()=>{const e=l.result;e?(h.push(n?e:e.value),s&&h.length>=s?i(h):e.continue()):i(h)}}))}async transaction(e,t,a){return await this.open(),await new Promise(((r,s)=>{const n=this._db.transaction(e,t);n.onabort=()=>s(n.error),n.oncomplete=()=>r(),a(n,(e=>r(e)))}))}async _call(e,t,a,...r){return await this.transaction([t],a,((a,s)=>{const n=a.objectStore(t),o=n[e].apply(n,r);o.onsuccess=()=>s(o.result)}))}close(){this._db&&(this._db.close(),this._db=null)}}O.prototype.OPEN_TIMEOUT=2e3;const L={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries(L))for(const a of t)a in IDBObjectStore.prototype&&(O.prototype[a]=async function(t,...r){return await this._call(a,t,e,...r)});try{self["workbox:expiration:6.1.5"]&&_()}catch(e){}const M="cache-entries",W=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class H{constructor(e){this._cacheName=e,this._db=new O("workbox-expiration",1,{onupgradeneeded:e=>this._handleUpgrade(e)})}_handleUpgrade(e){const t=e.target.result.createObjectStore(M,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),(async e=>{await new Promise(((t,a)=>{const r=indexedDB.deleteDatabase(e);r.onerror=()=>{a(r.error)},r.onblocked=()=>{a(new Error("Delete blocked"))},r.onsuccess=()=>{t()}}))})(this._cacheName)}async setTimestamp(e,t){const a={url:e=W(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)};await this._db.put(M,a)}async getTimestamp(e){return(await this._db.get(M,this._getId(e))).timestamp}async expireEntries(e,t){const a=await this._db.transaction(M,"readwrite",((a,r)=>{const s=a.objectStore(M).index("timestamp").openCursor(null,"prev"),n=[];let o=0;s.onsuccess=()=>{const a=s.result;if(a){const r=a.value;r.cacheName===this._cacheName&&(e&&r.timestamp<e||t&&o>=t?n.push(a.value):o++),a.continue()}else r(n)}})),r=[];for(const e of a)await this._db.delete(M,e.id),r.push(e.url);return r}_getId(e){return this._cacheName+"|"+W(e)}}class j{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,i(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new a("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&i(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&i(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new H(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),a=await self.caches.open(this._cacheName);for(const e of t)await a.delete(e,this._matchOptions);t.length>0?(c.groupCollapsed(`Expired ${t.length} `+(1===t.length?"entry":"entries")+" and removed "+(1===t.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),c.log(`Expired the following ${1===t.length?"URL":"URLs"}:`),t.forEach((e=>c.log(`    ${e}`))),c.groupEnd()):c.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,D(this.expireEntries()))}async updateTimestamp(e){i(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){return await this._timestampModel.getTimestamp(e)<Date.now()-1e3*this._maxAgeSeconds}throw new a("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}class F{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:a,cachedResponse:r})=>{if(!r)return null;const s=this._isResponseDateFresh(r),n=this._getCacheExpiration(a);D(n.expireEntries());const o=n.updateTimestamp(t.url);if(e)try{e.waitUntil(o)}catch(t){"request"in e&&c.warn(`Unable to ensure service worker stays alive when updating cache entry for '${d(e.request.url)}'.`)}return s?r:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{i(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),n(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(e);await a.updateTimestamp(t.url),await a.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new a("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});var t;e.maxEntries&&i(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&i(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(i(t=()=>this.deleteCacheAndMetadata(),"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),g.add(t),c.log("Registered a callback to respond to quota errors.",t))}_getCacheExpiration(e){if(e===l())throw new a("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new j(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}A(new RegExp("/note/"),new R({cacheName:"app-runtime",plugins:[new P({statuses:[0,200]})]})),A(new RegExp("^https://fonts.googleapis.com/"),new R({cacheName:"google-fonts-stylesheets"})),A(new RegExp("https://fonts.gstatic.com/"),new x({cacheName:"google-fonts-webfonts",plugins:[new P({statuses:[0,200]}),new F({maxAgeSeconds:31536e3,maxEntries:30})]})),A((({request:e})=>"image"===e.destination),new x({cacheName:"app-images",plugins:[new P({statuses:[0,200]}),new F({maxAgeSeconds:2592e3,maxEntries:60})]})),self.skipWaiting()}();
