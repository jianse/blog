<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Hugo 主题 MemE</title>
        <link>http://localhost:8080/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.79.1 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>jianse@gmail.com (jianse)</managingEditor>
        
        
            <webMaster>jianse@gmail.com (jianse)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Tue, 22 Dec 2020 19:25:47 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="http://localhost:8080/rss.xml" />
        
        
            <item>
                <title>[Java笔记]第十五章 反射机制</title>
                <link>http://localhost:8080/posts/java/chapter_15/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_15/</guid>
                <pubDate>Fri, 18 Oct 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第十五章-反射机制&#34;&gt;第十五章 反射机制&lt;/h1&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第十四章 网络编程</title>
                <link>http://localhost:8080/posts/java/chapter_14/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_14/</guid>
                <pubDate>Tue, 10 Sep 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第十四章-网络编程&#34;&gt;第十四章 网络编程&lt;/h1&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第十三章 并发</title>
                <link>http://localhost:8080/posts/java/chapter_13/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_13/</guid>
                <pubDate>Sun, 25 Aug 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第十三章-并发&#34;&gt;第十三章 并发&lt;/h1&gt;
&lt;h2 id=&#34;131-什么是线程&#34;&gt;13.1 什么是线程&lt;/h2&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第十二章 流与文件</title>
                <link>http://localhost:8080/posts/java/chapter_12/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_12/</guid>
                <pubDate>Tue, 20 Aug 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第十二章-流与文件&#34;&gt;第十二章 流与文件&lt;/h1&gt;
&lt;h2 id=&#34;121-什么是流&#34;&gt;12.1 什么是流&lt;/h2&gt;
&lt;p&gt;流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流。流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。&lt;/p&gt;
&lt;h2 id=&#34;122-流的分类&#34;&gt;12.2 流的分类&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按数据流的方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入流&lt;/li&gt;
&lt;li&gt;输出流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按处理数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符流&lt;/li&gt;
&lt;li&gt;字节流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按功能不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点流&lt;/li&gt;
&lt;li&gt;处理流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面按照功能展开讨论&lt;/p&gt;
&lt;h2 id=&#34;123-节点流&#34;&gt;12.3 节点流&lt;/h2&gt;
&lt;!-- markdownlint-disable MD033 --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字符流&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字节流&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;File&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;FileReader&lt;br&gt;FileWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;FileInputStream&lt;br&gt;FileOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Memory Array&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CharArrayReader&lt;br&gt;CharArrayWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ByteArrayInputStream&lt;br&gt;ByteArrayOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Memory String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;StringReader&lt;br&gt;StringWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pipe&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PipedReader&lt;br&gt;PipedWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PipedInputStream&lt;br&gt;PipedOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;File 文件流。对文件进行读、写操作 ：FileReader、FileWriter、FileInputStream、FileOutputStream。&lt;/li&gt;
&lt;li&gt;Memory 内存流
&lt;ul&gt;
&lt;li&gt;从/向内存数组读写数据: CharArrayReader与 CharArrayWriter、ByteArrayInputStream与ByteArrayOutputStream。&lt;/li&gt;
&lt;li&gt;从/向内存字符串读写数据 StringReader、StringWriter、StringBufferInputStream。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipe 管道流。 实现管道的输入和输出（进程间通信）: PipedReader与PipedWriter、PipedInputStream与PipedOutputStream。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;?&amp;gt; &lt;em&gt;TODO&lt;/em&gt; 添加详细介绍小节&lt;/p&gt;
&lt;h2 id=&#34;124-处理流&#34;&gt;12.4 处理流&lt;/h2&gt;
&lt;h3 id=&#34;1241-处理流的类型&#34;&gt;12.4.1 处理流的类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;处理类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字符流&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字节流&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Buffering&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BufferedReader&lt;br&gt;BufferedWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BufferedInputStream&lt;br&gt;BudderedOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Filtering&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;FilterReader&lt;br&gt;FilterWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;FilterInputStream&lt;br&gt;FilterOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converting&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;InputStreamReader&lt;br&gt;OutputStreamWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Serialization&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ObjectInputStream&lt;br&gt;OnjectOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Data conversion&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DataInputStream&lt;br&gt;DataOutputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Counting&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;LineNumberReader&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;LineNumberInputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Peeking ahead&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PushbackReader&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PushbackInputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Printing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PrintWriter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PrintStream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Merge&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SequenceInputStream&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- markdownlint-enable MD033 --&gt;
&lt;ul&gt;
&lt;li&gt;Buffering缓冲流：在读入或写出时，对数据进行缓存，以减少I/O的次数&lt;/li&gt;
&lt;li&gt;Filtering 滤流：在数据进行读或写时进行过滤 , 抽象类 .&lt;/li&gt;
&lt;li&gt;Converting between Bytes and Characters 转换流：按照一定的编码/解码标准将字节流转换为字符流，或进行反向转换（Stream到Reader）&lt;/li&gt;
&lt;li&gt;Object Serialization 对象流&lt;/li&gt;
&lt;li&gt;DataConversion 数据流： 按基本数据类型读、写（处理的数据是Java的基本类型（如布尔型，字节，整数和浮点数））&lt;/li&gt;
&lt;li&gt;Counting计数流： 在读入数据时对行记数&lt;/li&gt;
&lt;li&gt;Peeking Ahead预读流： 通过缓存机制，进行预读&lt;/li&gt;
&lt;li&gt;Printing打印流： 包含方便的打印方法&lt;/li&gt;
&lt;li&gt;Merge 合并流: 合并多个输入流的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1242-缓冲流&#34;&gt;12.4.2 缓冲流&lt;/h3&gt;
&lt;p&gt;对I/O进行缓冲是一种常见的性能优化，缓冲流为I/O流增加了内存缓冲区，增加缓冲区的两个目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允许Java的I/O一次不只操作一个字符，这样提高䇖整个系统的性能；&lt;/li&gt;
&lt;li&gt;由于有缓冲区，使得在流上执行skip、mark和reset方法都成为可能。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1243-转换流&#34;&gt;12.4.3 转换流&lt;/h3&gt;
&lt;p&gt;转换流有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;InputStreamReader：将字节流转换为字符流;&lt;/li&gt;
&lt;li&gt;OutputStreamWriter：将字符流转换为字节流。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;[warn] &lt;strong&gt;什么时候需要转换流?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你处理字符而不想处理复杂的编码解码过程时.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1244-数据流&#34;&gt;12.4.4 数据流&lt;/h3&gt;
&lt;p&gt;数据流：DataInputStream和DataOutputStream&lt;/p&gt;
&lt;p&gt;DataInputStream和DataOutputStream是面向字节的，因此要使用InputStream和OutputStream。&lt;/p&gt;
&lt;p&gt;DataInputStream和DataOutputStream分别继承InputStream和OutputStream，&lt;/p&gt;
&lt;p&gt;它们属于处理流，需要分别“套接”在InputStream和OutputStream类型的节点流上。&lt;/p&gt;
&lt;p&gt;DataInputStream和DataOutputStream提供了可以存取与机器无关的Java原始类数据（如：int，double等）的方法。&lt;/p&gt;
&lt;p&gt;DataInputStream和DataOutputStream的构造方法：&lt;/p&gt;
&lt;h2 id=&#34;125-操作文件&#34;&gt;12.5 操作文件&lt;/h2&gt;
&lt;p&gt;File是java.io包下面的一个类，代表与平台无关的文件或者目录。JAVA中，无论文件还是目录，都可以看作File类的一个对象。File类能对文件或目录新建，删除，获取属性等操作，但是不能直接操作文件内容（文件内容需要用数据流访问）。&lt;/p&gt;
&lt;p&gt;JVM默认会将workspace作为相对路径，即user.dir系统变量所指路径, 即如果这样初始化file对象，File file = new File(&amp;quot;.&amp;quot;); 就是获取了user.dir路径。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;java 1.7 引入了新的文件工具类&lt;a href=&#34;http://localhost:8080/posts/java/chapter_12/#jnf-package&#34;&gt;java.nio.file包&lt;/a&gt;用来代替旧的File类&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1251-file&#34;&gt;12.5.1 File&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;常用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;String getName() -如果file对象是一个文件，则返回文件名，如果是路径，则返回路径的最后一级

File getAbsoluteFile() -返回绝对路径

String getParent() -返回file对象所在目录的父目录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;检查文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;exists()-文件或目录是否存在

canRead()-是否可读

isFile()-是否是文件

isDirectory()-是否是目录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;获取文件属性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;long lastModified() -最后修改时间

long length() -文件长度
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;进行文件操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;createFile() -成功true，失败false

delete()

mkdir() -创建目录 ，file对象必须对应一个路径

String[] list() - 如果file对象是一个路径，list()将返回一个数组，如果路径下没有文件和子目录，则数组为empty；如果file对象是一个文件，或者file路径不存在，或者发生IO错误，则list()返回null

File[] listFiles() -同上，只不过返回的是File类型数组
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;126-流的使用&#34;&gt;12.6 流的使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/home/foo/test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/home/foo/target.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;127-javaio中的设计模式&#34;&gt;12.7 java.io中的设计模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[warn] See also &lt;a href=&#34;https://www.cnblogs.com/wxgblogs/p/5649933.html&#34;&gt;java.io中的设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; : 上面链接中StringBufferInputStream已经弃用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1271-装饰器模式&#34;&gt;12.7.1 装饰器模式&lt;/h3&gt;
&lt;p&gt;java.io包中IO流的设计使用了一种叫做装饰设计模式的方式 , 顾名思义就是在流的外部加上一层装饰, 以增强它的功能 .&lt;/p&gt;
&lt;p&gt;例如: 下面代码创建了一个文件输入流&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/home/foo/test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我想把这个流加上一个缓冲区以提高其性能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样FileInputStream就被装饰了起来, 从而增加了缓冲的功能 .&lt;/p&gt;
&lt;p&gt;!&amp;gt; 详见 &lt;a href=&#34;https://www.runoob.com/design-pattern/decorator-pattern.html&#34;&gt;装饰器模式|菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1272-适配器模式&#34;&gt;12.7.2 适配器模式&lt;/h3&gt;
&lt;p&gt;ByteArrayInputStream是一个适配器类 。ByteArrayInputStream继承了InputStream的接口，而封装了一个byte数组。换而言之，它将一个byte数组的接口适配成了InputStream流处理器的接口。 java语言支持四种类型：java类、java接口、java数组和原始类型。前三章是引用类型，类和数组的实例都是对象，原始类型的值不少对象。 java语言的数组是像所有其他对象一样的对象，而不管数组中所存放的元素的类型是什么。这样一来，ByteArrayInputStream就符合适配 器模式的描述，而且是一个对象形式的适配器类。&lt;/p&gt;
&lt;p&gt;!&amp;gt;详见 &lt;a href=&#34;https://www.runoob.com/design-pattern/adapter-pattern.html&#34;&gt;适配器模式|菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;128-javanio包&#34;&gt;12.8 java.nio包&lt;/h2&gt;
&lt;p&gt;Java NIO(New IO或者Non-blocking)是一个可以替代标准Java IO API的IO API（从Java 1.4开始)，Java NIO提供了与标准IO不同的IO工作方式。&lt;/p&gt;
&lt;p&gt;Java NIO: Channels and Buffers（通道和缓冲区）&lt;/p&gt;
&lt;p&gt;标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。&lt;/p&gt;
&lt;p&gt;Java NIO: Non-blocking IO（非阻塞IO）&lt;/p&gt;
&lt;p&gt;Java NIO可以让你非阻塞的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。当数据被写入到缓冲区时，线程可以继续处理它。从缓冲区写入通道也类似。&lt;/p&gt;
&lt;p&gt;Java NIO: Selectors（选择器）&lt;/p&gt;
&lt;p&gt;Java NIO引入了选择器的概念，选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个的线程可以监听多个数据通道。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[warn] &lt;strong&gt;详见&lt;/strong&gt; &lt;a href=&#34;http://ifeve.com/java-nio-all/&#34;&gt;并发编程网-nio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面文档后 3 节有待翻译 , 可以参考&lt;a href=&#34;https://www.jianshu.com/p/465ecd909f8c&#34;&gt;java NIO教程 - 简书&lt;/a&gt;互相补充查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1281-javaniofile包-idjnf-package&#34;&gt;12.8.1 java.nio.file包 :id=jnf-package&lt;/h3&gt;
&lt;p&gt;这个包定义了Java虚拟机的接口和类，以访问文件，文件属性和文件系统。用来代替java.io. File类.&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第十一章 集合框架</title>
                <link>http://localhost:8080/posts/java/chapter_11/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_11/</guid>
                <pubDate>Thu, 15 Aug 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第十一章-集合框架&#34;&gt;第十一章 集合框架&lt;/h1&gt;
&lt;p&gt;像C++的STL一样, java也有提供给我们的容器. 它存放在java.util包下, 以Collection和Map为根的两族接口和他们的实现类为主的泛型容器&lt;/p&gt;
&lt;p&gt;如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZ0zgU.png&#34; alt=&#34;collection_framework&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;111-collection&#34;&gt;11.1 Collection&lt;/h2&gt;
&lt;p&gt;Collection接口定义了所有Collection的公共行为&lt;/p&gt;
&lt;p&gt;主要的方法有:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;isEmpty()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;判断Collection是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;contains(Object o)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;判断元素是否在Collection中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;add(T item);&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;向Collection中添加元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;remove(T item)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移除Collection中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;iterate();&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;获得Collection的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;112-list&#34;&gt;11.2 List&lt;/h2&gt;
&lt;p&gt;List接口是Collection接口下的一支, List是Collection的更具体的一类&lt;/p&gt;
&lt;h3 id=&#34;1121-list的特点&#34;&gt;11.2.1 List的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;元素(逻辑上)以线性方式存储&lt;/li&gt;
&lt;li&gt;可以存放重复对象&lt;/li&gt;
&lt;li&gt;元素是有序的&lt;/li&gt;
&lt;li&gt;可以进行随机存取&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1122-vector&#34;&gt;11.2.2 Vector&lt;/h3&gt;
&lt;p&gt;Vector是java 1.0 版本时就引入的集合实现类, 它实现了一个可以同台增长的数组, 可以根据所存入的元素动态的伸缩.&lt;/p&gt;
&lt;p&gt;Vector是线程安全的, 所以Vector可以在多线程场景下安全的使用, 但也因为线程安全使其效率有所限制&lt;/p&gt;
&lt;p&gt;如果不需要线程安全的使用可伸缩的数组可以使用&lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#arraylist&#34;&gt;ArrayList&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1123-stack&#34;&gt;11.2.3 Stack&lt;/h3&gt;
&lt;p&gt;Stack是一种先进后出(LIFO)的容器, 它是Vector的子类, 这意味着Stack也是线程安全的.&lt;/p&gt;
&lt;p&gt;Stack类为自身提供独立的操作方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;判断栈是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;peek()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查看栈顶元素并且不出栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;pop()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;弹栈 : 出栈栈顶元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;push(E item)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;压栈 : 将元素压入栈顶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;search(Object o)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查询元素与栈顶的距离&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Stack也是java 1.0 时引入的 , java 1.2 时引入了&lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#deque&#34;&gt;Deque&lt;/a&gt;接口, Deque接口及其实现提供了更完整和一致的LIFO堆栈操作集，应优先使用此类。&lt;/p&gt;
&lt;h3 id=&#34;1124-arraylist-idarraylist&#34;&gt;11.2.4 ArrayList :id=arraylist&lt;/h3&gt;
&lt;p&gt;ArrayList顾名思义就是内部有数组实现的List, 它为我们封装了一系列数组操作, 让我们不必考虑增删改查时数组怎样变化, 数组如何扩展, 如何缩小, 然后向我们提供增删改查的接口.&lt;/p&gt;
&lt;p&gt;ArrayList实现了RandomACcess接口, 这是一个标记接口(没有方法的接口), 这意味着ArrayList支持常数时间复杂度的随机访问.&lt;/p&gt;
&lt;p&gt;ArrayList的访问效率较高, 插入删除效率较低, 适用于多访问少修改的使用场景.&lt;/p&gt;
&lt;p&gt;ArrayList 是 java 1.2 时集合框架引入的它与Vector的实现很相似 , 但是ArrayList时线程不安全的. 所以相应的它的效率要比Vector高.&lt;/p&gt;
&lt;h3 id=&#34;1125-linkedlist&#34;&gt;11.2.5 LinkedList&lt;/h3&gt;
&lt;p&gt;LiskedList是List的链表实现, 链表解决了数组插入删除慢的缺点 , Java中所有链表实际上都是双向链接的, 即每个节点同时存放着一个向前的和一个向后的引用 . 所以LinkedList也同时也是Deque接口的实现类.&lt;/p&gt;
&lt;p&gt;LinkedList插入删除效率较高, 但是不能进行常数复杂度的随机访问, 所以适用于多增删, 少随机访问的使用场景.&lt;/p&gt;
&lt;p&gt;!&amp;gt; &lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#_1145-linkedlist&#34;&gt;LinkedList&lt;/a&gt; 同时也实现了Deque接口&lt;/p&gt;
&lt;h3 id=&#34;1126-时间复杂度比较&#34;&gt;11.2.6 时间复杂度比较&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;操作&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ArrayList时间复杂度&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;LinkedList时间复杂度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读取get(index)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加add(E)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指定位置添加add(index, E)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除remove(E)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;113-set&#34;&gt;11.3 Set&lt;/h2&gt;
&lt;p&gt;Set是Collection接口下的另一支 , 代表了数学上的集合 , 元素是无序的 , 并且不包含重复的元素&lt;/p&gt;
&lt;h3 id=&#34;1131-set的特点&#34;&gt;11.3.1 Set的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;元素是无序的&lt;/li&gt;
&lt;li&gt;没有重复元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1132-hashset&#34;&gt;11.3.2 HashSet&lt;/h3&gt;
&lt;p&gt;HashSet 是借助&lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#_1152-hashmap&#34;&gt;HashMap&lt;/a&gt; 实现的, 将要插入的值当作HashMap的键, 值是一个固定的Object对象, 因为HashMap的key不能重复所以HashSet的元素就不能重复 .&lt;/p&gt;
&lt;h3 id=&#34;1133-linkedhashset&#34;&gt;11.3.3 LinkedHashSet&lt;/h3&gt;
&lt;p&gt;LinkedHashSet继承自HashSet , 源码更少、更简单 , 与HashMap唯一的区别是LinkedHashSet内部使用的是&lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#_1153-linkedhashmap&#34;&gt;LinkedHashMap&lt;/a&gt;。这样做的意义或者好处就是LinkedHashSet中的元素顺序是可以保证的 , 也就是说遍历序和插入序是一致的。&lt;/p&gt;
&lt;h3 id=&#34;1134-treeset&#34;&gt;11.3.4 TreeSet&lt;/h3&gt;
&lt;p&gt;TreeSet实现了NavigableSet接口 , 该接口定义了一些搜索目标的方法 , 并且该接口扩展了 SortedSet接口 , 所以TreeSet是一个可排序并且可以搜索的集合.&lt;/p&gt;
&lt;p&gt;TreeSet包装了一个TreeMap其中Set中的元素是&lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#_1154-treemap&#34;&gt;TreeMap&lt;/a&gt;的键, 而值是一个常量. 所有的方法都委托给了TreeMap&lt;/p&gt;
&lt;p&gt;因为TreeSet要实现对元素的排序所以元素必须实现Comparable接口以便对元素进行比较.&lt;/p&gt;
&lt;h2 id=&#34;114-queue&#34;&gt;11.4 Queue&lt;/h2&gt;
&lt;p&gt;Queue接口是Collection接口的子类, 也是集合框架的一员 . Queue接口通常(但不一定)定义了一种先进先出(LIFO)的数据结构&lt;/p&gt;
&lt;p&gt;Queue提供了两种操作Queue的方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;出错时抛出异常&lt;/li&gt;
&lt;li&gt;出错时返回特殊值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;队列方法总结&#34;&gt;队列方法总结&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt; &lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;抛出异常&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;返回特殊值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;add(e)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;offer(e)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;remove()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;poll()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检查&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;element()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;peek()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Queue实现通常不允许插入 &lt;code&gt;null&lt;/code&gt; 元素, 即使允许也不应该被插入到Queue中, 因为在poll()方法中返回null用来指示队列为空.&lt;/p&gt;
&lt;h3 id=&#34;1141-queue的特点&#34;&gt;11.4.1 Queue的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先进先出(LIFO)&lt;/li&gt;
&lt;li&gt;一般上不允许插入 &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一般不支持随机访问&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1142-priorityqueue&#34;&gt;11.4.2 PriorityQueue&lt;/h3&gt;
&lt;p&gt;基于优先级堆的无界优先级队列。优先级队列的元素根据其 自然顺序排序，或者根据使用的Comparator 构造函数在队列构造时提供。优先级队列不允许null元素。依赖于自然排序的优先级队列也不允许插入不可比较的对象（这样做可能导致 ClassCastException）。&lt;/p&gt;
&lt;p&gt;!&amp;gt; &lt;strong&gt;此实现不是同步的&lt;/strong&gt; , PriorityQueue 如果任何线程修改队列，则多个线程不应同时访问实例。相反，使用线程安全PriorityBlockingQueue类。&lt;/p&gt;
&lt;h3 id=&#34;1143-deque-iddeque&#34;&gt;11.4.3 Deque :id=deque&lt;/h3&gt;
&lt;p&gt;Deque接口扩展了Queue接口提供了一个双端队列, 即既可以从队列的两端出入队的队列&lt;/p&gt;
&lt;!-- markdownlint-disable MD033 --&gt;
&lt;table&gt;
 &lt;caption&gt;Summary of Deque methods&lt;/caption&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34;&gt;&lt;/td&gt;
    &lt;th scope=&#34;col&#34; colspan=&#34;2&#34;&gt; First Element (Head)&lt;/th&gt;
    &lt;th scope=&#34;col&#34; colspan=&#34;2&#34;&gt; Last Element (Tail)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th scope=&#34;col&#34; style=&#34;font-weight:normal; font-style:italic&#34;&gt;Throws exception&lt;/th&gt;
    &lt;th scope=&#34;col&#34; style=&#34;font-weight:normal; font-style:italic&#34;&gt;Special value&lt;/th&gt;
    &lt;th scope=&#34;col&#34; style=&#34;font-weight:normal; font-style:italic&#34;&gt;Throws exception&lt;/th&gt;
    &lt;th scope=&#34;col&#34; style=&#34;font-weight:normal; font-style:italic&#34;&gt;Special value&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;th scope=&#34;row&#34;&gt;Insert&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;addFirst(e)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;offerFirst(e)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;addLast(e)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;offerLast(e)&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th scope=&#34;row&#34;&gt;Remove&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;removeFirst()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;pollFirst()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;removeLast()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;pollLast()&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th scope=&#34;row&#34;&gt;Examine&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;getFirst()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;peekFirst()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;getLast()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;peekLast()&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;/tbody&gt;
 &lt;/table&gt;
&lt;!-- markdownlint-enable MD033 --&gt;
&lt;p&gt;Deque扩展了Queue. 当deque用作队列时，会产生FIFO（先进先出）行为。元素在双端队列的末尾添加并从头开始删除。从Queue接口继承的Deque方法与下表中指示的方法完全等效 ：&lt;/p&gt;
&lt;h4 id=&#34;queue与deque方法比较&#34;&gt;Queue与Deque方法比较&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Queue方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Deque方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;add(e)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;addLast(e)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;offer(e)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;offerLast(e)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;remove()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;removeFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;poll()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pollFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;element()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;getFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;peek()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;peekFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;同时Deque也可以当作Stack使用&lt;/p&gt;
&lt;h4 id=&#34;stack与deque方法比较&#34;&gt;Stack与Deque方法比较&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Stack方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Deque方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push(e)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;addFirst(e)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pop()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;removeFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;peek()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;peekFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1144-arraydeque&#34;&gt;11.4.4 ArrayDeque&lt;/h3&gt;
&lt;p&gt;ArrayDeque是一个可变大小的无界双端队列, 它的底层使用数组实现. 他们不是线程安全的, 禁止使用空元素&lt;/p&gt;
&lt;h3 id=&#34;1145-linkedlist&#34;&gt;11.4.5 LinkedList&lt;/h3&gt;
&lt;p&gt;上面提到了List接口下的&lt;a href=&#34;http://localhost:8080/posts/java/chapter_11/#_1125-linkedlist&#34;&gt;LinkedList&lt;/a&gt; , 现在我们要重新提起它 , 它同时实现了Deque 接口 , 这意味着它同时也是一个双端队列 , 并且LinkedList允许插入 &lt;code&gt;null&lt;/code&gt; 值.&lt;/p&gt;
&lt;h2 id=&#34;115-map&#34;&gt;11.5 Map&lt;/h2&gt;
&lt;p&gt;Map 是一种键-值对（key-value）集合，Map 集合中的每一个元素都包含一个键对象和一个值对象。其中，键对象不允许重复，而值对象可以重复，并且值对象还可以是 Map 类型的，就像数组中的元素还可以是数组一样。&lt;/p&gt;
&lt;h3 id=&#34;1151-map特点&#34;&gt;11.5.1 Map特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Map存储的是一对值(键值对)&lt;/li&gt;
&lt;li&gt;Map的key是唯一的&lt;/li&gt;
&lt;li&gt;不同的key可以对应同一个值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1152-hashmap&#34;&gt;11.5.2 HashMap&lt;/h3&gt;
&lt;p&gt;HashMap是使用散列表(哈希表)实现的, 是Map的非同步实现 , 此实现提供所有可选的映射操作 , 并允许使用 &lt;code&gt;null值&lt;/code&gt; 和 &lt;code&gt;null键&lt;/code&gt; . 此类不保证映射的顺序 , 特别是它不保证该顺序恒久不变 .&lt;/p&gt;
&lt;p&gt;?&amp;gt; &lt;em&gt;TODO&lt;/em&gt; 添加链接到数据结构 , hashCode(), equals()&lt;/p&gt;
&lt;h3 id=&#34;1153-linkedhashmap&#34;&gt;11.5.3 LinkedHashMap&lt;/h3&gt;
&lt;p&gt;LinkedHashMap是HashMap的子类它扩展了HashMap的内部结构Entry , 让Entry包含了一个向前的和一个向后的引用, 这样插入的Entry就可以构成一个链表&lt;/p&gt;
&lt;h3 id=&#34;1154-treemap&#34;&gt;11.5.4 TreeMap&lt;/h3&gt;
&lt;p&gt;TreeMap 是一个有序的key-value集合，它是通过红黑树实现的。&lt;/p&gt;
&lt;p&gt;TreeMap 继承于AbstractMap，所以它是一个Map，即一个key-value集合。&lt;/p&gt;
&lt;p&gt;TreeMap 实现了NavigableMap接口，意味着它支持一系列的导航方法。比如返回有序的key集合。&lt;/p&gt;
&lt;p&gt;TreeMap 实现了Cloneable接口，意味着它能被克隆。&lt;/p&gt;
&lt;p&gt;TreeMap 实现了java.io. Serializable接口，意味着它支持序列化。&lt;/p&gt;
&lt;p&gt;TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。&lt;/p&gt;
&lt;p&gt;TreeMap的基本操作 containsKey、get、put 和 remove 的时间复杂度是 log(n) 。&lt;/p&gt;
&lt;p&gt;另外，TreeMap是非同步的。 它的iterator 方法返回的迭代器是fail-fastl的。&lt;/p&gt;
&lt;p&gt;?&amp;gt; &lt;em&gt;TODO&lt;/em&gt; 添加链接到数据结构&lt;/p&gt;
&lt;h3 id=&#34;1155-hashtable&#34;&gt;11.5.5 Hashtable&lt;/h3&gt;
&lt;p&gt;Hashtable类可以看作HashMap类的前身, 它在java1.1时被引入, 而HashMap产生于JDK 1.2&lt;/p&gt;
&lt;p&gt;!&amp;gt; &lt;a href=&#34;https://www.cnblogs.com/xinzhao/p/5644175.html&#34;&gt;HashMap和HashTable的不同&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1156-properties&#34;&gt;11.5.6 Properties&lt;/h3&gt;
&lt;p&gt;Properties (Java.util. Properties) 是Hashtable类的子类 , 该类并不是集合框架的一员 , 该类主要用于读取Java的配置文件 , 不同的编程语言有自己所支持的配置文件 , 配置文件中很多变量是经常改变的 , 为了方便用户的配置 , 能让用户够脱离程序本身去修改相关的变量设置。就像在Java中 , 其配置文件常为.properties文件，是以键值对的形式进行参数配置的。&lt;/p&gt;
&lt;h2 id=&#34;116-集合泛型多态与面向接口&#34;&gt;11.6 集合、泛型、多态与面向接口&lt;/h2&gt;
&lt;h3 id=&#34;1161-集合与泛型&#34;&gt;11.6.1 集合与泛型&lt;/h3&gt;
&lt;p&gt;之前我们使用集合时一般是这样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是这样的使用有什么坏处吗?&lt;/p&gt;
&lt;p&gt;让我们考虑一下这样的场景 , 你使用一个ArrayList来存放一个学生列表.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;emm 看起来不错~&lt;/p&gt;
&lt;p&gt;你决定为学生录入一些成绩.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Steudnt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看起来也还不错 . 那么现在让我们往学生列表里面添加一些奇怪的东西 .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译并运行 , 你会发现这段代码通过了编译并且可以运行了 , 这显然并不合理 , 我们希望的是学生列表内只能存储学生信息 , 并且它在我们犯错误前可以给我们一些提示 , 如发生异常或给出一些提示 . 并不是无限的包容.&lt;/p&gt;
&lt;p&gt;泛型给我们提供了这样的特性 , 我们对上面的代码进行这样的改动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到在创建ArrayList类型后面加上了一对尖括号 , 其中的Student表示的是ArrayList所接受的类型 .&lt;/p&gt;
&lt;p&gt;这样我们就指定了ArrayList可以容纳的类型 , 同时 ArrayList 的get方法的返回值就变成了返回尖括号中指定的类型 , 也就免去了强制类型转换的麻烦 .&lt;/p&gt;
&lt;p&gt;这时我们再向学生列表中加入一些其他类型的元素.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译, 这时候编译器报错了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nl&#34;&gt;Error:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;不兼容的类型&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;String无法转换为cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ntboy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1162-泛型集合的好处&#34;&gt;11.6.2 泛型集合的好处&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类型安全&lt;/strong&gt; . 泛型的主要目标是提高 Java 程序的类型安全。通过知道使用泛型定义的变量的类型限制，编译器可以在一个高得多的程度上验证类型假设。没有泛型，这些假设就只存在于程序员的头脑中（或者如果幸运的话，还存在于代码注释中）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消除强制类型转换&lt;/strong&gt;。 泛型的一个附带好处是，消除源代码中的许多强制类型转换。这使得代码更加可读，并且减少了出错机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;潜在的性能收益&lt;/strong&gt;。 泛型为较大的优化带来可能。在泛型的初始实现中，编译器将强制类型转换（没有泛型的话，程序员会指定这些强制类型转换）插入生成的字节码中。但是更多类型信息可用于编译器这一事实，为未来版本的 JVM 的优化带来可能。由于泛型的实现方式，支持泛型（几乎）不需要 JVM 或类文件更改。所有工作都在编译器中完成，编译器生成类似于没有泛型（和强制类型转换）时所写的代码，只是更能确保类型安全而已。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1163-使用泛型集合&#34;&gt;11.6.3 使用泛型集合&lt;/h3&gt;
&lt;p&gt;像上面的ArrayList一样 , Collection接口都有泛型参数 , 我们可以通过泛型参数指定容器内元素的类型&lt;/p&gt;
&lt;p&gt;如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;HashSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;odd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nameMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1164-集合与多态&#34;&gt;11.6.4 集合与多态&lt;/h3&gt;
&lt;p&gt;考虑下面场景 , 还是上面的学生列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有一天你觉得ArrayList不好用决定改成LinkedList&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样以来，用到你的list的地方都得更改类型声明。更重要的是，用到你的list的人，他们写自己的代码的时候是基于“你的这个list是一个ArrayList ”这样的前提来写的，你突然把它改成了LinkedList，很可能导致他们的程序出错或者需要重写。&lt;/p&gt;
&lt;p&gt;那么就有了这样一个问题 , 如何修改自己的实现而不影响别人使用呢?&lt;/p&gt;
&lt;p&gt;多态性给了我们答案 , 当你声明一个变量的时候，把它的类型声明得越笼统越好，越具体越糟糕。笼统对修改是友好的，具体对修改不友好。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1165-面向接口&#34;&gt;11.6.5 面向接口&lt;/h3&gt;
&lt;p&gt;!&amp;gt; &lt;a href=&#34;https://www.cnblogs.com/iceb/p/7093884.html&#34;&gt;详见&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;117-collections和arrays工具类&#34;&gt;11.7 Collections和Arrays工具类&lt;/h2&gt;
&lt;h3 id=&#34;1171-collections工具类&#34;&gt;11.7.1 Collections工具类&lt;/h3&gt;
&lt;p&gt;集合框架中的工具类：特点：该工具类中的方法都是静态的。&lt;/p&gt;
&lt;h3 id=&#34;1172-arrays工具类&#34;&gt;11.7.2 Arrays工具类&lt;/h3&gt;
&lt;p&gt;用于对数组操作的工具类&lt;/p&gt;
&lt;h2 id=&#34;118-遍历容器&#34;&gt;11.8 遍历容器&lt;/h2&gt;
&lt;h3 id=&#34;1181-list的遍历&#34;&gt;11.8.1 List的遍历&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List 接口中有按照索引取元素的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;foreach 是java编译器提供的语法糖 , 它在处理实现了Iterable接口的类上使用Iterator进行迭代 , 对数组则使用简单for循环迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Iterator迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1182-set的遍历&#34;&gt;11.8.2 Set的遍历&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;li&gt;Iterator迭代器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个遍历方式本质上是一样的foreach语法糖会被编译为迭代器版本&lt;/p&gt;
&lt;h3 id=&#34;1183-map的遍历&#34;&gt;11.8.3 Map的遍历&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;keySet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;goodbye&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keySet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;keySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key=%s,value=%s%n&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;entrySet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;goodbye&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entrySet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key=%s,value=%s%n&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;119-javautilconcurrent包&#34;&gt;11.9 java.util.concurrent包&lt;/h2&gt;
&lt;p&gt;J. U. C并发包，即java.util.concurrent包，是JDK的核心工具包，是JDK1.5之后，由 Doug Lea实现并引入。&lt;/p&gt;
&lt;p&gt;整个java.util.concurrent包，按照功能可以大致划分如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;juc-locks 锁框架&lt;/li&gt;
&lt;li&gt;juc-atomic 原子类框架&lt;/li&gt;
&lt;li&gt;juc-sync 同步器框架&lt;/li&gt;
&lt;li&gt;juc-collections 集合框架&lt;/li&gt;
&lt;li&gt;juc-executors 执行器框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中juc-collections包含了许多在多线程框架下常用的集合类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[info] &lt;strong&gt;详见&lt;/strong&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000015558984&#34;&gt;java多线程进阶&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展&lt;/strong&gt;&lt;a href=&#34;https://sourceforge.net/projects/javaconcurrenta/&#34;&gt;跟着动画学多线程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第十章 泛型程序设计</title>
                <link>http://localhost:8080/posts/java/chapter_10/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_10/</guid>
                <pubDate>Sat, 10 Aug 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第十章-泛型程序设计&#34;&gt;第十章 泛型程序设计&lt;/h1&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第九章 常用类</title>
                <link>http://localhost:8080/posts/java/chapter_09/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_09/</guid>
                <pubDate>Thu, 08 Aug 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第九章-常用类&#34;&gt;第九章 常用类&lt;/h1&gt;
&lt;h2 id=&#34;91-java的包装类&#34;&gt;9.1 Java的包装类&lt;/h2&gt;
&lt;h3 id=&#34;911-什么是包装类型&#34;&gt;9.1.1 什么是包装类型&lt;/h3&gt;
&lt;p&gt;Java 设计当初就提供了 8 种 基本数据类型及对应的 8 种包装数据类型。我们知道 Java 是一种面向对象编程的高级语言，所以包装类型正是为了解决基本数据类型无法面向对象编程所提供的。&lt;/p&gt;
&lt;h3 id=&#34;912-八种基本类型的包装类&#34;&gt;9.1.2 八种基本类型的包装类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;基本数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包装类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Charactor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Double&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;913-包装类的继承结构&#34;&gt;9.1.3 包装类的继承结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/02/11/1o20Ld.png&#34; alt=&#34;wrapper_class&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;914-包装类的应用场景&#34;&gt;9.1.4 包装类的应用场景&lt;/h3&gt;
&lt;h4 id=&#34;1-泛型只能是包装类&#34;&gt;1. 泛型只能是包装类&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 编译时异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 正确写法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-不能包含默认值的成员变量&#34;&gt;2. 不能包含默认值的成员变量&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本数据类型的成员变量都有默认值，如以上代码中的status默认值是0，如果定义中0代表失败或者异常，那么在一定的情境下就会有问题。使用包装类Integer，它的默认值是null，就可以避免默认值的影响了。&lt;/p&gt;
&lt;h4 id=&#34;3-方法参数允许定义空值&#34;&gt;3. 方法参数允许定义空值&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看以上代码，方法参数定义的是基本数据类型 int，所以必须得传一个数字过来，不能传 null，很多场合我们希望是能传递 null 的，所以这种场合用包装类比较合适。&lt;/p&gt;
&lt;h3 id=&#34;915-自动装箱拆箱&#34;&gt;9.1.5 自动装箱、拆箱&lt;/h3&gt;
&lt;p&gt;Java 5 增加了自动装箱、拆箱机制，提供基本数据类型和包装类型的相互转换操作。&lt;/p&gt;
&lt;p&gt;在 Java 5 之前要用整型数初始化一个Integer类的实例一般要这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java 5 提供了一个语法糖，叫做自动装箱。现在你可以直接对Integer对象赋值而不用调用valueOf方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相似的，在Java 5 之前用Integer对象赋值给整型变量的代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;intValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java 5 提供了另一个语法糖，叫做自动拆箱。用来简化显式的intValue方法调用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们来从字节码的角度看看这些语法糖的真实面貌&lt;/p&gt;
&lt;p&gt;创建Test.java 如下，并编译以下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令行编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac Test.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反编译字节码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javap -v Test.class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以得到很多信息下面展示最重要的部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;0: bipush        10
2: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
5: astore_1
6: aload_1
7: invokevirtual #3                  // Method java/lang/Integer.intValue:()I
10: istore_2
11: return
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您有一定的字节码知识就可以很明显的看到这里调用了valueOf方法和intValue方法。&lt;/p&gt;
&lt;h3 id=&#34;916-integercache&#34;&gt;9.1.6 IntegerCache&lt;/h3&gt;
&lt;p&gt;考虑下面代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可能会说，很显然&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;true
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是我们要注意现在比较的并不是数值，而是在比较两个对象的引用。&lt;/p&gt;
&lt;p&gt;那么看起来他们都是不同的对象引用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;false
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以先停一下，考虑一下上面代码的输出是什么？&lt;/p&gt;
&lt;p&gt;下面给出运行的结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可能有所疑惑为什么判断两个Integer对象是否是同一个引用两次返回了不同的值&lt;/p&gt;
&lt;p&gt;首先我们要明确两点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们现在比较相等的是两个对象的引用&lt;/li&gt;
&lt;li&gt;根据我们上面的自动装箱，我们得到Integer的对象引用是通过valueOf方法实现的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么我们就有两个新的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在什么条件下两个引用是相同的，什么条件下是不同的&lt;/li&gt;
&lt;li&gt;valueOf方法到底做了什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个问题，两个引用引用的是同一个对象就是相同的返回的就是true，自然的其他情况就是不同的返回的就是false。&lt;/p&gt;
&lt;p&gt;第二个问题，也很简单，让我们一起查看一下valueOf的代码实现就可以知道它干了什么，这里我就直接说结果。valueOf接受一个整形变量作为参数，先判断了参数值的大小，如果在一定的范围内，在这个范围内它预先创建好了这个整些整型数的对象，如果参数满足在这个范围内就直接返回预先创建的对象。如果不在这个范围内就创建新的对象，并返回。&lt;/p&gt;
&lt;p&gt;答案就近在眼前了，如果一个整数在这个范围内就可以返回同一个引用，如果不在这个范围内，就不是同一个引用。&lt;/p&gt;
&lt;h4 id=&#34;这有什么好处和坏处&#34;&gt;这有什么好处和坏处&lt;/h4&gt;
&lt;p&gt;好处是对于一些常用的数字，比如循环的次数，迭代的次数，缓存可以减少对象创建的开销，从而提高程序的性能。&lt;/p&gt;
&lt;p&gt;坏处也是显而易见的，我们不能通过&lt;code&gt;==&lt;/code&gt;直接判断数字的值是否相同（当然对于对象的具体意义是否相同的问题我们应该一直使用equals方法，或者自定义一个判断的方式）&lt;/p&gt;
&lt;h4 id=&#34;其他的包装类是否有类似的机制&#34;&gt;其他的包装类是否有类似的机制&lt;/h4&gt;
&lt;p&gt;所有整数类都是类似的机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ByteCache 用于缓存 Byte 对象&lt;/li&gt;
&lt;li&gt;ShortCache 用于缓存 Short 对象&lt;/li&gt;
&lt;li&gt;LongCache 用于缓存 Long 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;这个范围是固定的吗&#34;&gt;这个范围是固定的吗&lt;/h4&gt;
&lt;p&gt;所有这些缓存的默认范围都是-128到127&lt;/p&gt;
&lt;p&gt;但只有Integer可以通过参数修改IntegerCache的上限&lt;/p&gt;
&lt;h2 id=&#34;92-string类&#34;&gt;9.2 String类&lt;/h2&gt;
&lt;h3 id=&#34;921-不可变字符串&#34;&gt;9.2.1 不可变字符串&lt;/h3&gt;
&lt;h3 id=&#34;922-可变字符串&#34;&gt;9.2.2 可变字符串&lt;/h3&gt;
&lt;h4 id=&#34;stringbuffer&#34;&gt;StringBuffer&lt;/h4&gt;
&lt;h4 id=&#34;stringbuilder&#34;&gt;StringBuilder&lt;/h4&gt;
&lt;h2 id=&#34;93-scanner类&#34;&gt;9.3 Scanner类&lt;/h2&gt;
&lt;h2 id=&#34;94-math类&#34;&gt;9.4 Math类&lt;/h2&gt;
&lt;h2 id=&#34;95-日期时间处理类&#34;&gt;9.5 日期时间处理类&lt;/h2&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/java/">java</category>
                                
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/javase/">javase</category>
                                
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/">包装类</category>
                                
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/string/">String</category>
                                
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/scanner/">Scanner</category>
                                
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/math/">Math</category>
                                
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/tags/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/">日期时间</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第八章 异常、断言和日志</title>
                <link>http://localhost:8080/posts/java/chapter_08/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_08/</guid>
                <pubDate>Mon, 05 Aug 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第八章-异常断言和日志&#34;&gt;第八章 异常、断言和日志&lt;/h1&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第七章 接口</title>
                <link>http://localhost:8080/posts/java/chapter_07/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_07/</guid>
                <pubDate>Mon, 29 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第七章-接口&#34;&gt;第七章 接口&lt;/h1&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第六章 继承与多态</title>
                <link>http://localhost:8080/posts/java/chapter_06/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_06/</guid>
                <pubDate>Sat, 27 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第六章-继承与多态&#34;&gt;第六章 继承与多态&lt;/h1&gt;
&lt;p&gt;?&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第五章 对象和类</title>
                <link>http://localhost:8080/posts/java/chapter_05/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_05/</guid>
                <pubDate>Thu, 25 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第五章-对象和类&#34;&gt;第五章 对象和类&lt;/h1&gt;
&lt;h2 id=&#34;51-面向对象程序设计概述&#34;&gt;5.1 面向对象程序设计概述&lt;/h2&gt;
&lt;p&gt;面向对象程序设计(简称OOP)是当今主流的程序设计范型， 它已经取代了20世纪70年代的“结构化” 过程化程序设计开发技术。Java 是完全面向对象的， 必须熟悉OOP才能 够编写Java程序。&lt;/p&gt;
&lt;h3 id=&#34;511-面向过程和面向对象&#34;&gt;5.1.1 面向过程和面向对象&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;面向过程编程&lt;/strong&gt;,一般上,解决一个问题的过程就是从条件出发,经过一定的步骤,不断接近,直到求出结果的过程. 这样的解决问题方式就是面向过程的.通过定义一系列操作达到预期的目的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象编程&lt;/strong&gt;,是对问题空间的建模,首先描述问题中涉及的模型,以及模型的属性,行为,然后将各个模型组合,求解问题.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如:&lt;/strong&gt; 一个五子棋游戏,面向过程的解决方案一般如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZElAP.png&#34; alt=&#34;pop&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样的方式符合一般的数学上的程序定义,但当问题的规模逐渐增大,问题的复杂性增长,求解问题的步骤就要增多,面向过程的编程就会逐渐体现出劣势.&lt;/p&gt;
&lt;p&gt;面向对象的方式就应运而生了,面向对象的编程方式是面向过程的一种扩展,将问题域中的数据和方法抽象成对象的属性和行为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如:&lt;/strong&gt; 上面的五子棋游戏给出面向对象的解决方案,即抽象出&lt;strong&gt;两个玩家&lt;/strong&gt;、&lt;strong&gt;一个棋盘&lt;/strong&gt;。自然的两个玩家各自知道自己的棋子颜色，他们可以向棋盘落子，并且轮流落子;而棋盘保存了玩家的落子信息,并且在落子后可以给出玩家是否胜利这样的判断,因为他拥有所有子的信息。&lt;/p&gt;
&lt;h3 id=&#34;512-类&#34;&gt;5.1.2 类&lt;/h3&gt;
&lt;p&gt;类(class)是构造对象的模板或蓝图。由类构造(construct)对象的过程称为创建类的实例(instance)。&lt;/p&gt;
&lt;h3 id=&#34;513-对象&#34;&gt;5.1.3 对象&lt;/h3&gt;
&lt;p&gt;对象是根据类创建出来的实体,&lt;/p&gt;
&lt;h3 id=&#34;514-类之间的关系&#34;&gt;5.1.4 类之间的关系&lt;/h3&gt;
&lt;p&gt;在类之间,最常见的关系有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖(&lt;code&gt;uses-a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;聚合(&lt;code&gt;has-a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;继承(&lt;code&gt;is-a&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-使用预定义类&#34;&gt;5.2 使用预定义类&lt;/h2&gt;
&lt;p&gt;在 Java 中， 没有类就无法做任何事情,前面接触过几个类如String,Integer等.这些类都不我们自己定义的,是Java提供的系统库中的类,分布在rt.jar tools.jar和dt.jar中.
这些系统库中预定义的类包含了大量的功能,是我们开发Java项目离不开的东西.&lt;/p&gt;
&lt;h3 id=&#34;521-对象和对象变量&#34;&gt;5.2.1 对象和对象变量&lt;/h3&gt;
&lt;p&gt;要想使用对象,就必须先构造对象,并指定其初始状态.然后,对对象应用方法.&lt;/p&gt;
&lt;p&gt;在Java程序设计语言中,使用构造器(constructor)构造新实例.构造器是一种特殊的方法,用来构造并初始化对象.
下面看一个例子。在标准 Java 库中包含一个 Date 类。它的 对象将描述一个时间点， 例如：&lt;code&gt;Tue Jul 30 19:26:01 CST 2019&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;构造器的名字应该跟类名相同.因此Date的构造器名为Date,想要构造一个Date对象需要在构造器前面加上new关键字,如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个表达式构造了一个新对象.这个对象被初始化为当前的日期和时间.&lt;/p&gt;
&lt;p&gt;如果需要的话也可以将这个对象传递给一个方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者,也可以将一个方法应用到刚创建的对象.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面几个例子中,构造的对象仅使用了一次.通常我们希望构造的对象可以多次使用,因此,需要将对象保存在一个变量中;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下图所示,对象变量today引用了新建的对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZEK0I.png&#34; alt=&#34;ref&#34;&gt;&lt;/p&gt;
&lt;p&gt;在对象与对象变量之间存在这一个重要的区别.例如,语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//birthday doesn&amp;#39;t refer to any object
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定义了一个对象变量birthday,它可以引用Date类型的对象.但是,一定要认识到:变量birthday不是一个对象,实际上也没有引用对象.此时,不能将任何Date方法应用于这个变量上.语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的语句会产生编译错误.&lt;/p&gt;
&lt;p&gt;必须实现初始化birthday,这里有两个选择.&lt;/p&gt;
&lt;p&gt;1.构造新的对象初始化这个变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.让这个变量引用一个已存在的对象:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在,这两个变量引用同一个对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZEM7t.png&#34; alt=&#34;same-ref&#34;&gt;&lt;/p&gt;
&lt;p&gt;一定要认识到:一个对象变量并没有实际包含一个对象,而仅仅引用一个对象.&lt;/p&gt;
&lt;p&gt;在Java中,任何对象变量的值都是对存储在另一个地方的一个对象的引用.new 操作符的返回值也是一个引用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; : 局部变量不会自动初始化为null,而必须通过new或将他们设置为null进行初始化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;53-用户自定义类&#34;&gt;5.3 用户自定义类&lt;/h2&gt;
&lt;p&gt;上面我们已经编写过一些简单的类,这些类包含一个简单的main方法.也使用过也写Java提供给我们的预定义类.但是大多数情况下我们都需要写一些自定义的类,来满足特殊的要求.现在开始学习如何设计复杂应用程序所需的各种主力类.通常,这些类没有main方法,却有自己的实例域和实例方法.要想创建一个完整的程序,应该将若干类组合在一起,其中只有一个类有 main 方法.&lt;/p&gt;
&lt;h3 id=&#34;531-实例---student-类&#34;&gt;5.3.1 实例 - Student 类&lt;/h3&gt;
&lt;p&gt;在Java中,最简单的类定义形式为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ClassName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;field1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;field2&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;constructor1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;constructor2&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method2&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面看一个非常简单的Student类.在编写教务管理系统是可能会用到.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// instance fields
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;admissionDay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// constructor
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;admissionDay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// a method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// more methods
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;532-多个源文件的使用&#34;&gt;5.3.2 多个源文件的使用&lt;/h3&gt;
&lt;p&gt;上面的Student类没有Java程序的入口main方法,我们可以选择在Student类上添加一个main方法.也可以在一个新的类里新建main方法.&lt;/p&gt;
&lt;p&gt;许多程序员习惯将每个类存在一个单独的源文件中.例如,将Student类存放在文件Student.java中,将StudentTest类存放在StudentTest.java中.&lt;/p&gt;
&lt;p&gt;如果喜欢这组织文件,将可以有两种编译源程序的方式&lt;/p&gt;
&lt;h4 id=&#34;1-使用通配符调用编译器&#34;&gt;1. 使用通配符调用编译器&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac Student*.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-直接编译包含main方法的类&#34;&gt;2. 直接编译包含main方法的类&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac StudentTest.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二种方法没有显式的包含Student.java但是Student.java也被编译了,因为javac发现StudentTest类种使用了Student类就会去查找Student.class没有找到时就会去寻找Student.java,然后对其进行编译,
如果Student.java比已有的Student.class版本新,就会重新编译Student.java替换旧的Student.class&lt;/p&gt;
&lt;h3 id=&#34;533-student类的结构&#34;&gt;5.3.3 Student类的结构&lt;/h3&gt;
&lt;p&gt;开始部分是一些变量的声明,叫做实例域,这些变量保存了类的实例的当前状态,private确保只有Student自身能够访问这些实例域,而其他类不能读写这些域&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;admissionDay&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面是一个构造器,构造器由虚拟机调用,用来创建类的实例.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再后是一些实例方法,用来改变类的状态,或者是执行类的动作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*...some code...*/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;534-构造器&#34;&gt;5.3.4 构造器&lt;/h3&gt;
&lt;p&gt;构造器是与类名相同的一类特殊的方法.在构造对象时,构造器会被调用 ,以便将实例域初始化为所希望的状态.
例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;James Bond&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2019&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构造器与其他的方法由一个重要的不同.构造器总是伴随着new操作符的执行被调用,而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的,例如,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;james&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Employee&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;James Bond&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2019&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//ERROR
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码将产生编译时错误.&lt;/p&gt;
&lt;h3 id=&#34;535-实例方法&#34;&gt;5.3.5 实例方法&lt;/h3&gt;
&lt;p&gt;实例方法用于操作对象以及存取他们的实例域.例如,方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用这个方法可以修改score实例域的值,如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;james&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;92&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;setScore方法由两个参数.第一个参数成为隐式(implicit)参数,是出现在方法名前的Student对象.第二个参数是位于方法名后面括号中的值,这是一个显式(explicit)参数.（有些人把隐式参数称为方法调用的目标或接收者。)&lt;/p&gt;
&lt;p&gt;显式参数是明显地列在方法声明中的,隐式参数没有出现在方法声明中.&lt;/p&gt;
&lt;p&gt;在每个方法中,关键字this表示隐式参数.如果需要的话,可以用下列方式编写setScore方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样可以将实例域与局部变量明显的区别开.&lt;/p&gt;
&lt;h3 id=&#34;536-封装&#34;&gt;5.3.6 封装&lt;/h3&gt;
&lt;p&gt;最后来看一下Student的其他方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个简单的访问器方法.由于它们只返回实例域值， 因此又称为域访问器。&lt;/p&gt;
&lt;p&gt;将name标记为public,以此来取代独立的访问器方法会不会更好呢?&lt;/p&gt;
&lt;p&gt;想象如下问题,如果name是一个只读属性,name的值在初始化时指定之后就不能进行更改了,那么把name声明为public,name就可以被更改,而造成不可预知的错误.&lt;/p&gt;
&lt;p&gt;在有些时候，需要获得或设置实例域的值。因此，应该提供下面三项内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个私有的数据域;&lt;/li&gt;
&lt;li&gt;一个公有的域访问器方法;&lt;/li&gt;
&lt;li&gt;一个公有的域更改器方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做要比提供一个简单的公有数据域复杂些， 但是却有着下列明显的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以改变内部实现，除了该类的方法之外，不会影响其他代码。&lt;/li&gt;
&lt;li&gt;更改器方法可以执行错误检查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这样的封装,不对外部提供直接访问数据域,而提供修改数据域的方法,可以防止数据被随意改动而不被感知.&lt;/p&gt;
&lt;h3 id=&#34;537-访问修饰符&#34;&gt;5.3.7 访问修饰符&lt;/h3&gt;
&lt;p&gt;访问修饰符可修饰的成分&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt; &lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类(外部类)&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;成员变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;public&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;default&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;protected&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;private&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;访问修饰符的权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public:对所有类可见&lt;/li&gt;
&lt;li&gt;default:对同一包中的类可见、对同一包中的子类可见&lt;/li&gt;
&lt;li&gt;protected:对同一包中的类可见、对同一包及不同包中的子类可见&lt;/li&gt;
&lt;li&gt;private:仅对类本身可见&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;default修饰符即不加修饰符时的状态&lt;/li&gt;
&lt;li&gt;可见是可访问的意思,即由这些修饰符修饰的成分(类,方法,成员变量)可以被其他类访问.对子类可见即子类可以继承.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;各访问修饰符的访问权限&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;访问权限&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;同一包&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;同一包中的子类&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;不同包&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;不同包中的子类&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;public&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;default&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;protected&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;private&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;538-非访问修饰符&#34;&gt;5.3.8 非访问修饰符&lt;/h3&gt;
&lt;p&gt;修饰成分表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt; &lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类(外部类)&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;成员变量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;接口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;abstract&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;static&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;final&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;修饰符的含义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abstract:表示为一个抽象类,&lt;/li&gt;
&lt;li&gt;static:表示静态,不用创建变量只用变量名即可访问或调用.&lt;/li&gt;
&lt;li&gt;final:表示不可以被继承&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;54-静态域与静态方法&#34;&gt;5.4 静态域与静态方法&lt;/h2&gt;
&lt;p&gt;在前面给出的示例程序中，main 方法都被标记为 static 修饰符。下面讨论一下这个修饰 符的含义。&lt;/p&gt;
&lt;h3 id=&#34;541-静态域&#34;&gt;5.4.1 静态域&lt;/h3&gt;
&lt;p&gt;如果将域定义为static,每个类中只有一个这样的域.这个域将和类存储在一起,类的对象没有这个域的拷贝,而是共享这个域.&lt;/p&gt;
&lt;h3 id=&#34;542-静态常量&#34;&gt;5.4.2 静态常量&lt;/h3&gt;
&lt;p&gt;静态变量使用的比较少,但静态常量使用的比较多,他们之间的区别是变量是可以更改的,而常量是不可以更改的.final关键字为我们提供了这样的限制,如:
Math类中由关于圆周率的定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;14159265358979323846&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在程序中,可以采用Math.PI的形式获得这个常量&lt;/p&gt;
&lt;h3 id=&#34;543-静态方法&#34;&gt;5.4.3 静态方法&lt;/h3&gt;
&lt;p&gt;静态方法是一种不能向对象实施操作的方法(即没有隐式参数).例如Math类的pow方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算幂 $x^a$ ,调用pow方法时没有使用Math类的实例.&lt;/p&gt;
&lt;h3 id=&#34;544-工厂方法&#34;&gt;5.4.4 工厂方法&lt;/h3&gt;
&lt;p&gt;在Java中,获得一个类实例最简单的方法就是使用new关键字,通过构造函数来实现对象的创建.
例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过在实际使用中,我们经常还用另外一种方式获取类的实例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Calender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;calender&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//or
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;像这样的：不通过 new，而是用一个静态方法来对外提供自身实例的方法，即为我们所说的&lt;code&gt;静态工厂方法(Static factory method)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;545-为什么使用静态工厂方法&#34;&gt;5.4.5 为什么使用静态工厂方法&lt;/h3&gt;
&lt;h4 id=&#34;1-静态工厂方法有名字&#34;&gt;1. 静态工厂方法有名字&lt;/h4&gt;
&lt;p&gt;由于语言的特性，Java 的构造函数都是跟类名一样的。这导致的一个问题是构造函数的名称不够灵活，经常不能准确地描述返回值，在有多个重载的构造函数时尤甚，如果参数类型、数目又比较相似的话，那更是很容易出错。&lt;/p&gt;
&lt;p&gt;比如:Date类的六个构造函数.
&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZEunA.png&#34; alt=&#34;constructors_of_date&#34;&gt;
Date 类有很多重载函数，对于开发者来说，假如不是特别熟悉的话，恐怕是需要犹豫一下，才能找到合适的构造函数的。而对于其他的代码阅读者来说，估计更是需要查看文档，才能明白每个参数的含义了。&lt;/p&gt;
&lt;p&gt;（当然，Date 类在目前的 Java 版本中，只保留了一个无参和一个有参的构造函数，其他的都已经标记为 @Deprecated 了）&lt;/p&gt;
&lt;p&gt;而如果使用静态工厂方法，就可以给方法起更多有意义的名字，比如前面的 valueOf、newInstance、getInstance 等，对于代码的编写和阅读都能够更清晰。&lt;/p&gt;
&lt;h4 id=&#34;2-可以控制是否生成类的新实例&#34;&gt;2. 可以控制是否生成类的新实例&lt;/h4&gt;
&lt;p&gt;有时候外部调用者只需要拿到一个实例，而不关心是否是新的实例；又或者我们想对外提供一个单例时 —— 如果使用工厂方法，就可以很容易的在内部控制，防止创建不必要的对象，减少开销。&lt;/p&gt;
&lt;p&gt;在实际的场景中，单例的写法也大都是用静态工厂方法来实现的。&lt;/p&gt;
&lt;h4 id=&#34;3-可以返回原返回类型的子&#34;&gt;3. 可以返回原返回类型的子&lt;/h4&gt;
&lt;p&gt;这条不用多说，设计模式中的基本的原则之一——『里氏替换』原则，就是说子类应该能替换父类。&lt;/p&gt;
&lt;p&gt;显然，构造方法只能返回确切的自身类型，而静态工厂方法则能够更加灵活，可以根据需要方便地返回任何它的子类型的实例。&lt;/p&gt;
&lt;h3 id=&#34;546-main方法&#34;&gt;5.4.6 main方法&lt;/h3&gt;
&lt;p&gt;在Java中，main()方法是Java应用程序的入口方法，也就是说，程序在运行的时候，第一个执行的方法就是main()方法，这个方法和其他的方法有很大的不同，比如方法的名字必须是main，方法必须是public static void 类型的，方法必须接收一个字符串数组的参数等等。&lt;/p&gt;
&lt;p&gt;它是一个静态方法,程序开始运行时还没有任何类.main方法将执行并创建程序所需要的对象.&lt;/p&gt;
&lt;h2 id=&#34;55-方法参数&#34;&gt;5.5 方法参数&lt;/h2&gt;
&lt;p&gt;Java 程序设计语言总是采用按值调用。也就是说， 方法得到的是所有参数值的一个拷 贝，特别是，方法不能修改传递给它的任何参数变量的内容。&lt;/p&gt;
&lt;p&gt;例如:假定一个方法试图将一个参数值增加至 3 倍&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tripleValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后调用这个方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;percent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tripleValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;percent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过结果并没有成功.调用这个方法之后,percent的值还是10.
具体的执行过程如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZE1tf.png&#34; alt=&#34;method_args&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的main()表示的是main方法它表示一个栈帧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;main方法中调用tripleValue()并把percent值的拷贝传给tripleValue栈帧中的x&lt;/li&gt;
&lt;li&gt;x被扩大为3倍&lt;/li&gt;
&lt;li&gt;tripleValue()方法执行完毕栈帧弹出栈顶,x的值就没了&lt;/li&gt;
&lt;li&gt;percent值并未被改变&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;56-对象构造&#34;&gt;5.6 对象构造&lt;/h2&gt;
&lt;p&gt;前面已经学习了编写简单的构造器，可以定义对象的初始状态。但是，由于对象构造非 常重要，所以 Java 提供了多种编写构造器的机制。下面将详细地介绍这些机制。&lt;/p&gt;
&lt;h3 id=&#34;561-重载&#34;&gt;5.6.1 重载&lt;/h3&gt;
&lt;p&gt;有些类有多个构造器,例如,可以如下构造一个空的 StringBuilder 对象:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者,可以指定一个初始化字符串(&amp;quot;To do:\n&amp;quot;);
这种同名的特征叫做重载(overloading).。如果多个方法有 相同的名字、不同的参数，便产生了重载&lt;/p&gt;
&lt;p&gt;!&amp;gt;&lt;strong&gt;注意&lt;/strong&gt; : Java 允许重载任何方法， 而不只是构造器方法。因此，要完整地描述一个方法，需要指出方法名以及参数类型。这叫做方法的签名（signature)。
返回类型不是方法签名的一部分。也就是说， 不能有两个名字相同、 参数类型也相同却返回不同类型值的方法。&lt;/p&gt;
&lt;h3 id=&#34;562-默认域初始化&#34;&gt;5.6.2 默认域初始化&lt;/h3&gt;
&lt;p&gt;如果在构造器中没有显式地给域赋予初值，那么就会被自动地赋为默认值： 数值为 0、 布尔值为 false、 对象引用为null。然而，只有缺少程序设计经验的人才会这样做。确实， 如 果不明确地对域进行初始化，就会影响程序代码的可读性。&lt;/p&gt;
&lt;p&gt;!&amp;gt; &lt;strong&gt;注意&lt;/strong&gt; : 局部变量不会被初始化为特定的初始值&lt;/p&gt;
&lt;h3 id=&#34;563-无参数的构造器&#34;&gt;5.6.3 无参数的构造器&lt;/h3&gt;
&lt;p&gt;很多类豆豆包含一个无参数的构造函数,如果在编写一个类时没有编写构造器， 那么系统就会提供一个无参数构造器。这个构造 器将所有的实例域设置为默认值.&lt;/p&gt;
&lt;p&gt;如果类中提供了至少一个构造器,Java就不会再创建默认的无参构造器了.&lt;/p&gt;
&lt;h3 id=&#34;564-显式域初始化&#34;&gt;5.6.4 显式域初始化&lt;/h3&gt;
&lt;p&gt;通过重载类的构造器方法，可以采用多种形式设置类的实例域的初始状态。确保不管怎 样调用构造器，每个实例域都可以被设置为一个有意义的初值，这是一种很好的设计习惯。&lt;/p&gt;
&lt;h3 id=&#34;565-调用另一个构造器&#34;&gt;5.6.5 调用另一个构造器&lt;/h3&gt;
&lt;p&gt;可以通过this关键字可以调用当前类的应一个构造器,如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码调用了当前类的无参数构造器&lt;/p&gt;
&lt;h3 id=&#34;566-初始化块&#34;&gt;5.6.6 初始化块&lt;/h3&gt;
&lt;p&gt;前面已经讲过两种初始化数据域的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在构造器中设置值&lt;/li&gt;
&lt;li&gt;在声明中赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，Java 还有第三种机制， 称为初始化块（initializationblock)。在一个类的声明中， 可以包含多个代码块。只要构造类的对象，这些块就会被执行。例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nextId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nextId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;nextId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个示例中,无论使用哪个构造器构造对象,id域都在对象初始化块中被初始化.首先运行初始化块,然后才运行构造器的主体部分.&lt;/p&gt;
&lt;p&gt;这种机制不是必需的，也不常见。通常会直接将初始化代码放在构造器中。&lt;/p&gt;
&lt;h3 id=&#34;567-初始化代码执行顺序&#34;&gt;5.6.7 初始化代码执行顺序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;所有数据域被初始化为默认值（0、false 或 null)。&lt;/li&gt;
&lt;li&gt;按照在类声明中出现的次序， 依次执行所有域初始化语句和初始化块.&lt;/li&gt;
&lt;li&gt;如果构造器第一行调用了第二个构造器，则执行第二个构造器主体.&lt;/li&gt;
&lt;li&gt;执行这个构造器的主体.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;568-静态初始化块&#34;&gt;5.6.8 静态初始化块&lt;/h3&gt;
&lt;p&gt;静态初始化块就是在初始化块前加上static关键字,但是它的意义就完全改变了&lt;/p&gt;
&lt;p&gt;静态初始化块将在类被加载到内存时被执行(早于实例化类),且只执行一次.&lt;/p&gt;
&lt;h2 id=&#34;57-包&#34;&gt;5.7 包&lt;/h2&gt;
&lt;p&gt;Java使用包(package)将类组织起来,借助于包可以方便的组织自己的代码,并将自己代码与别人提供的代码库分开管理.&lt;/p&gt;
&lt;p&gt;使用包的主要原因是确保类名的唯一性。假如两个程序员不约而同地建立了 Employee 类。只要将这些类放置在不同的包中， 就不会产生冲突。事实上，为了保证包名的绝对 唯一性， Sun 公司建议将公司的因特网域名（这显然是独一无二的）以逆序的形式作为包 名，并且对于不同的项目使用不同的子包。&lt;/p&gt;
&lt;p&gt;从编译器的角度来看， 嵌套的包之间没有任何关系。例如，java.utU 包与java.util.jar 包 毫无关系。每一个都拥有独立的类集合。&lt;/p&gt;
&lt;p&gt;例如导入java.util.*并不会导入java.util.jar包下的内容&lt;/p&gt;
&lt;h3 id=&#34;571-类的导入&#34;&gt;5.7.1 类的导入&lt;/h3&gt;
&lt;p&gt;一个类可以使用所属包中的所有类,以及其他包中的共有类我们可以采用两种方式访问另一个包中的公有类&lt;/p&gt;
&lt;h4 id=&#34;1-使用每个类的全限定类名&#34;&gt;1. 使用每个类的全限定类名&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这显然很繁琐&lt;/p&gt;
&lt;h4 id=&#34;2-使用import语句&#34;&gt;2. 使用import语句&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;572-静态导入&#34;&gt;5.7.2 静态导入&lt;/h3&gt;
&lt;p&gt;import 语句不仅可以导人类，还增加了导人静态方法和静态域的功能。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.lang.System.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以使用System中的静态方法和静态域,而不必加上类前缀:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;573-使用包&#34;&gt;5.7.3 使用包&lt;/h3&gt;
&lt;p&gt;要想使用包,就必须将包的名字放在源文件的开头,然后将包中的文件放到与完整的包名匹配的子目录中.&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.ntboy.entity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个文件应该放到子目录 &lt;code&gt;cn/ntboy/entity&lt;/code&gt; 中&lt;/p&gt;
&lt;h2 id=&#34;58-类路径&#34;&gt;5.8 类路径&lt;/h2&gt;
&lt;p&gt;类文件可以存储在JAR文件中,JAR文件可能被存储在任何位置,那么如何告诉java虚拟机去哪里找到我们需要的JAR文件呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存储在当前文件夹
将jar文件存储在当前类包的根目录下jvm会自动搜索这个目录,但是这显然不是一个灵活的方式&lt;/li&gt;
&lt;li&gt;使用-classpath选项
运行java命令 时,可以加上一个选项&lt;code&gt;-classpath&lt;/code&gt;或者&lt;code&gt;-cp&lt;/code&gt;,这两个选项时等价的,这样就可以告诉jvm去哪里搜索类文件,可以使用绝对路径,相对路径,以及系统变量.&lt;/li&gt;
&lt;li&gt;使用CLASSPATH环境变量(java1.5 之后不用再配置CLASSPATH了)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;59-文档注释&#34;&gt;5.9 文档注释&lt;/h2&gt;
&lt;p&gt;JDK 包含一个很有用的工具,叫做javadoc,它可以由源文件生成一个 HTML 文档.&lt;/p&gt;
&lt;p&gt;像java的标准库的文档就是javadoc生成的例如&lt;a href=&#34;https://docs.oracle.com/en/java/javase/12/docs/api/index.html&#34;&gt;javase-12-docs-api&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;591-注释的插入&#34;&gt;5.9.1 注释的插入&lt;/h3&gt;
&lt;p&gt;注释以&lt;code&gt;/**&lt;/code&gt;开始,并以&lt;code&gt;*/&lt;/code&gt;结束.&lt;/p&gt;
&lt;p&gt;每个 &lt;code&gt;/**...*/&lt;/code&gt;文档注释在标记之后紧跟着自由格式文本（free-form text)。标记由@开 始， 如@author 或@param。 自由格式文本的第一句应该是一个概要性的句子。javadoc 实用程序自动地将这些句子抽取出来形成概要页。&lt;/p&gt;
&lt;h3 id=&#34;592-类注释&#34;&gt;5.9.2 类注释&lt;/h3&gt;
&lt;p&gt;类注释必须放在 import 语句之后，类定义之前。&lt;/p&gt;
&lt;h3 id=&#34;593-方法注释&#34;&gt;5.9.3 方法注释&lt;/h3&gt;
&lt;p&gt;每一个方法注释必须放在所描述的方法之前。除了通用标记之外， 还可以使用下面的标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@param&lt;/code&gt; 变量描述
这个标记将对当前方法的参数部分添加一个条目这个描述可以占据多行， 并可以使用 HTML 标记。一个方法的所有@param 标记必须放在一起。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@return&lt;/code&gt; 返回值描述
这个标记将对当前方法添加“ return” （返回）部分。这个描述可以跨越多行， 并可以 使用 HTML 标记。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@throws&lt;/code&gt; 异常描述
这个标记将添加一个注释， 用于表示这个方法有可能抛出异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;594-域注释&#34;&gt;5.9.4 域注释&lt;/h3&gt;
&lt;p&gt;只需要对公有域（通常指的是静态常量）建立文档。&lt;/p&gt;
&lt;h3 id=&#34;595-通用注释&#34;&gt;5.9.5 通用注释&lt;/h3&gt;
&lt;p&gt;下面的标记可以用在类文档的注释中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@author 姓名&lt;/code&gt; 这个标记将产生一个 &amp;quot;author&amp;quot; (作者）条目。可以使用多个@author 标记，每个&lt;code&gt;@author&lt;/code&gt; 标记对应一个作者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@version 版本&lt;/code&gt; 这个标记将产生一个“ version”（版本）条目。这里的文本可以是对当前版本的任何描述。
面的标记可以用于所有的文档注释中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@since 文本&lt;/code&gt; 这个标记将产生一个 &amp;quot;since&amp;quot; （始于）条目。这里的 text 可以是对引人特性的版本描 述。例如，&lt;code&gt;@since version 1.7.10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@deprecated&lt;/code&gt; 这个标记将对类、方法或变量添加一个不再使用的注释。文本中给出了取代的建议。
例如， &lt;code&gt;@deprecated Use &amp;lt;code&amp;gt; setVIsible(true)&amp;lt;/code&amp;gt; instead&lt;/code&gt; 通过&lt;code&gt;@see&lt;/code&gt; 和&lt;code&gt;@link&lt;/code&gt;标记，可以使用超级链接， 链接到 javadoc 文档的相关部分或外部文档。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@see 引用&lt;/code&gt; 这个标记将在 &amp;quot;see also&amp;quot; 部分增加一个超链接。它可以用于类中，也可以用于方法中。
这里的引用可以选择下列情形之一：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;package.class#feature label
&amp;lt;a href=&amp;#34;...&amp;#34;&amp;gt;label/a&amp;gt;
text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一种情况是最常见的。只要提供类、方法或变量的名字，javadoc 就在文档中插入一个超链接。
例如，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@see com.horstraann.corejava.Employee#raiseSalary(double)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;建立一个链接到 com.horstmann.corejava.Employee 类的 raiseSalary(double) 方法的超链接。 可以省略包名， 甚至把包名和类名都省去，此时，链接将定位于当前包或当前类&lt;/p&gt;
&lt;p&gt;需要注意，一定要使用井号（#)，而不要使用句号（.）分隔类名与方法名，或类 名与变量名。
Java 编译器本身可以熟练地断定句点在分隔包、 子包、类、内部类与方 法和变量时的不同含义。
但是javadoc 实用程序就没有这么聪明了，因此必须对它提供帮助。
如果@see 标记后面有一个 &amp;lt; 字符，就需要指定一个超链接。可以超链接到任何 URL。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@see &amp;lt;a href=&amp;#34;www.horstmann.com/corejava.html&amp;#34;&amp;gt;The Core Java home page&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述各种情况下， 都可以指定一个可选的标签(label)作为链接锚(link anchor). 如果省略了 label, 用户看到的锚的名称就是目标代码名或 URL。
如果@see 标记后面有一个双引号(&amp;quot;)字符，文本就会显示在 &amp;quot;see also&amp;quot; 部分。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@see &amp;#34;Core Java 2 volume 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以为一个特性添加多个@see标记，但必须将它们放在一起。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果愿意的话，还可以在注释中的任何位置放置指向其他类或方法的超级链接， 以及 插人一个专用的标记，  例如，&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{@link package.class#feature label}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的特性描述规则与@see标记规则一样。&lt;/p&gt;
&lt;h3 id=&#34;596-包与概述注释&#34;&gt;5.9.6 包与概述注释&lt;/h3&gt;
&lt;p&gt;可以直接将类、方法和变量的注释放置在 Java 源文件中，只要用 &lt;code&gt;/** . . . */&lt;/code&gt; 文档注释界 定就可以了。但是， 要想产生包注释，就需要在每一个包目录中添加一个单独的文件。可以 有如下两个选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供一个以 package.html 命名的 HTML 文件。在标记 &lt;code&gt;&amp;lt;body&amp;gt; - &amp;lt;/body&amp;gt;&lt;/code&gt; 之间的所有文本都会被抽取出来。&lt;/li&gt;
&lt;li&gt;提供一个以 package-info.java命名的 Java 文件。这个文件必须包含一个初始的以 &lt;code&gt;/**&lt;/code&gt; 和 &lt;code&gt;*/&lt;/code&gt; 界定的 Javadoc 注释， 跟随在一个包语句之后。它不应该包含更多的代码或注释。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还可以为所有的源文件提供一个概述性的注释。这个注释将被放置在一个名为 &lt;code&gt;overview.html&lt;/code&gt; 的文件中，这个文件位于包含所有源文件的父目录中。标记 &lt;code&gt;&amp;lt;body&amp;gt;... &amp;lt;/body&amp;gt;&lt;/code&gt; 间的所 有文本将被抽取出来。当用户从导航栏中选择“ Overview” 时，就会显示出这些注释内容。&lt;/p&gt;
&lt;h3 id=&#34;597-注释的抽取与doclet&#34;&gt;5.9.7 注释的抽取与doclet&lt;/h3&gt;
&lt;p&gt;有关细节内容请查阅&lt;a href=&#34;https://docs.oracle.com/en/java/javase/12/javadoc/javadoc.html#GUID-7A344353-3BBF-45C4-8B28-15025DDCC643&#34;&gt;javadoc-guide&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;510-类设计技巧&#34;&gt;5.10 类设计技巧&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一定要保证数据私有,如果不清楚是否要公开那就标记为私有&lt;/li&gt;
&lt;li&gt;一定要对数据初始化&lt;/li&gt;
&lt;li&gt;不要在类中使用过多的基本类型&lt;/li&gt;
&lt;li&gt;不是所有的域都需要独立的域访问器和域更改器&lt;/li&gt;
&lt;li&gt;将职责过多的类进行分解&lt;/li&gt;
&lt;li&gt;类名和方法名要能够体现他们的职责&lt;/li&gt;
&lt;li&gt;优先使用不可变的类&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第四章 数组与数组操作</title>
                <link>http://localhost:8080/posts/java/chapter_04/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_04/</guid>
                <pubDate>Tue, 23 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第四章-数组与数组操作&#34;&gt;第四章 数组与数组操作&lt;/h1&gt;
&lt;h2 id=&#34;41-数组&#34;&gt;4.1 数组&lt;/h2&gt;
&lt;p&gt;数组是一种数据结构， 用来存储同一类型值的集合。通过一个整型下标可以访问数组中 的每一个值。例如， 如果 a 是一个整型数组， a[i] 就是数组中下标为 i 的整数。&lt;/p&gt;
&lt;p&gt;在声明数组变量时， 需要指出数组类型 （数据元素类型紧跟 []) 和数组变量的名字。下 面声明了整型数组 a:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过， 这条语句只声明了变量 a， 并没有将 a 初始化为一个真正的数组。应该使用 new 运算 符创建数组。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条语句创建了一个可以存储 100 个整数的数组。数组长度不要求是常量： &lt;code&gt;new int[n]&lt;/code&gt; 会创建 一个长度为 n 的数组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用下面两种形式声明数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种形式都是正确的, 但第一种更明确一些, 因为它将类型 &lt;code&gt;int[]&lt;/code&gt; 与变量名分开了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;42-数组的初始化以及匿名数组&#34;&gt;4.2 数组的初始化以及匿名数组&lt;/h2&gt;
&lt;h3 id=&#34;421-数组的初始化&#34;&gt;4.2.1 数组的初始化&lt;/h3&gt;
&lt;p&gt;在Java中, 提供了一种创建数组对象并同时赋予初始值的简化书写形式。下面是一 例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Jhon&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Mecheal&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Sarah&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 在使用这种语句时, 不需要调用 &lt;code&gt;new&lt;/code&gt; .&lt;/p&gt;
&lt;h3 id=&#34;422-匿名数组&#34;&gt;4.2.2 匿名数组&lt;/h3&gt;
&lt;p&gt;匿名数组就是没有引用的数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Jerry&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种表示法将创建一个新数组并利用括号中提供的值进行初始化，数组的大小就是初始值的 个数。使用这种语法形式可以在不创建新变量的情况下重新初始化一个数组。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Sarah&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Artanis&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Jerry&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[James, Sarah, Artanis]
[Tom, Jerry]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码初始化了一个 &lt;code&gt;names&lt;/code&gt; 变量, 赋值并输出了该变量, 然后用匿名数组重新为 &lt;code&gt;names&lt;/code&gt; 赋值, 并输出了 &lt;code&gt;names&lt;/code&gt; 的值.&lt;/p&gt;
&lt;h2 id=&#34;43-遍历数组&#34;&gt;4.3 遍历数组&lt;/h2&gt;
&lt;h3 id=&#34;431-for-循环&#34;&gt;4.3.1 for 循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=...;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;432-for-each-循环java-15&#34;&gt;4.3.2 for each 循环(java 1.5)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=...;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读&lt;/strong&gt;
有个更加简单的方式打印数组中的所有值，即利用 Arrays 类的 toString 方法。
调用 &lt;code&gt;Arrays.toString(a)&lt;/code&gt; , 返回一个包含数组元素的字符串，这些元素被放置在括号内， 并用逗号分隔，
例如:“[2, 3, 5, 7，11，13]”、 要想打印数组， 可以调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;44-数组拷贝&#34;&gt;4.4 数组拷贝&lt;/h2&gt;
&lt;p&gt;在 Java中，允许将一个数组变量拷贝给另一个数组变量。这时，++两个变量将引用同一个数组++(即&lt;strong&gt;浅拷贝&lt;/strong&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scNames&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Sarah&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Artanis&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scNames&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZibTK.png&#34; alt=&#34;array_shallow_copy&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果希望将一个数组的所有值拷贝到一个新的数组中去(即&lt;strong&gt;深拷贝&lt;/strong&gt;)， 就要使用 Arrays 类的 copyOf方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scNames&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scNames&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZiHw6.png&#34; alt=&#34;array_deep_copy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;45-数组排序&#34;&gt;4.5 数组排序&lt;/h2&gt;
&lt;p&gt;要想对数组进行排序，可以使用Arrays类中的sort方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个方法使用了优化的快速排序算法。快速排序算法对于大多数数据集合来说都是效率比较高的。&lt;/p&gt;
&lt;h2 id=&#34;46-多维数组&#34;&gt;4.6 多维数组&lt;/h2&gt;
&lt;p&gt;多维数组将使用多个下标访问数组元素, 它适用于表示表格或更加复杂的排列形式.&lt;/p&gt;
&lt;p&gt;观感上它更像是一个数组的嵌套, 或者说是一些数组组成的数组.&lt;/p&gt;
&lt;p&gt;在 Java中， 声明一个二维数组相当简单。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[][]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;balances&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与一维数组一样， 在调用 new 对多维数组进行初始化之前不能使用它。在这里可以这样初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;balances&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NYEARS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NRATES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外， 如果知道数组元素， 就可以不调用 new， 而直接使用简化的书写形式对多维数组 进行初始化。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[][]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;magicSquare&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦数组被初始化， 就可以利用两个方括号访问每个元素， 例如，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;balances&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不规则数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，读者所看到的数组与其他程序设计语言中提供的数组没有多大区别。但实际存在着一些细微的差异， 而这正是 Java 的优势所在：Java 实际上没有多维数组，只有一维 数组。多维数组被解释为&amp;quot;&lt;strong&gt;数组的数组&lt;/strong&gt;&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/16/mZi7ex.png&#34; alt=&#34;irregular_array&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是一个杨辉三角形的例子&lt;/p&gt;
&lt;p&gt;具体代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;IrregularArrayTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[][]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][];&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第三章 流程控制</title>
                <link>http://localhost:8080/posts/java/chapter_03/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_03/</guid>
                <pubDate>Sat, 20 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第三章-流程控制&#34;&gt;第三章 流程控制&lt;/h1&gt;
&lt;h2 id=&#34;31-块与作用域&#34;&gt;3.1 块与作用域&lt;/h2&gt;
&lt;p&gt;在深入学习控制结构之前, 需要了解块(block)的概念.&lt;/p&gt;
&lt;p&gt;块(即复合语句)是指由一对大括号括起来的若干条简单的Java语句. 块确定了变量的作用域. 一个块可以嵌套在另一个块中.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//这是main函数块
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//这个块嵌套在mian函数内
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//a的作用域就在这个块内
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见的块有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类定义后跟的块: 这个块是我们常见的最大的作用域&lt;/li&gt;
&lt;li&gt;函数后跟的块&lt;/li&gt;
&lt;li&gt;条件/循环语句后跟的块&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中条件/循环语句后跟的块如果块内只有一条语句则可以省略块标识符, 即省略 &lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;32-顺序结构&#34;&gt;3.2 顺序结构&lt;/h2&gt;
&lt;p&gt;顺序结构是程序中最基本, 最简单, 最常见的结构, 程序的执行顺序就是从上至下依次执行的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mViUAO.png&#34; alt=&#34;order&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;33-条件结构&#34;&gt;3.3 条件结构&lt;/h2&gt;
&lt;h3 id=&#34;331-if-else-语句&#34;&gt;3.3.1 if else 语句&lt;/h3&gt;
&lt;h4 id=&#34;单if分支&#34;&gt;单if分支&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mViDgA.png&#34; alt=&#34;if_single_branch&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//some code
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ifelse双分支&#34;&gt;if/else双分支&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mVi09H.png&#34; alt=&#34;if_else&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//some code
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//this branch when true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//this branch when false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;two&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//some code
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ifelse-ifelse-多分支&#34;&gt;if/else if/else 多分支&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mViyut.png&#34; alt=&#34;if_muti_branch&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditons1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;code1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditions2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;code2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditionsn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;coden&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;332-switch-语句&#34;&gt;3.3.2 switch 语句&lt;/h3&gt;
&lt;p&gt;在处理多个选项时, 使用if/else结构显得有些笨重. Java有一个和C/C++完全一样的switch语句.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//not a compatitive case
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;switch语句将从与选项值相匹配的 &lt;code&gt;case&lt;/code&gt; 标签处开始执行直到遇到 &lt;code&gt;break&lt;/code&gt; 语句, 或者执行到switch语句的结束处为止。如果没有相匹配的case标签, 而有default 子句, 就执行这个子句。&lt;/p&gt;
&lt;h2 id=&#34;34-循环结构&#34;&gt;3.4 循环结构&lt;/h2&gt;
&lt;h3 id=&#34;341-while-循环&#34;&gt;3.4.1 while 循环&lt;/h3&gt;
&lt;p&gt;当条件为true时, while循环执行其后的语句块. 一般格式为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mVicHf.png&#34; alt=&#34;while&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;: 计算1-100的和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;342-do-while-循环&#34;&gt;3.4.2 do while 循环&lt;/h3&gt;
&lt;p&gt;do while 循环是后置判断循环, 就是先执行循环体一次, 再进行条件的判断. 它的语法格式是:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mVirjI.png&#34; alt=&#34;do_while&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;: 为用户显示菜单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;: 当用户启动我们的应用程序时, 我们应该呈现给用户我们的用户界面, 并且开始一个循环, 等待用户的指令再进行下一步的响应&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//显示用户界面
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;showUserInterface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//等待用户的指令
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;waitingForUserCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//处理用户指令
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;handleCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//更新用户界面
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;updateUserInterface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//当程序还在运行时继续循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isRunning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然真正的应用程序可能没有这么简单, 但是逻辑是这样的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;343-for-循环&#34;&gt;3.4.3 for 循环&lt;/h3&gt;
&lt;p&gt;for循环语句是支持迭代的一种通用结构, 利用每次迭代之后更新的计数器或者类似的变量来控制迭代次数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;流程图同while循环, 所以for循环和while循环可以相互转化.&lt;/p&gt;
&lt;h3 id=&#34;344-中断控制流语句&#34;&gt;3.4.4 中断控制流语句&lt;/h3&gt;
&lt;h4 id=&#34;break&#34;&gt;break&lt;/h4&gt;
&lt;p&gt;break语句可以中断程序的执行流, 将程序的执行流重新定向到块的结束位置&lt;/p&gt;
&lt;h5 id=&#34;不带标签的break&#34;&gt;不带标签的break&lt;/h5&gt;
&lt;p&gt;与用于退出switch语句的break语句一样, 它也可以用于退出循环语句.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt;: 寻找大于1000的第一个质数, 当我们找到第一个满足条件的数就可以停止了.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isPrimeNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;带标签的break&#34;&gt;带标签的break&lt;/h5&gt;
&lt;p&gt;与 C++ 不同，Java 还提供了一种带标签的 break语句，用于跳出多重嵌套的循环语句。 有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套 的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;read_data:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(...){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(...){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Enter a number &amp;gt;=0: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;扩展&lt;/strong&gt;带标签的break语句还可以用在语句块上如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nl&#34;&gt;label:&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//exits block
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//jumps here when the break statement executes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;只能跳出语句块, 不能跳入语句块&lt;/p&gt;
&lt;h4 id=&#34;continue&#34;&gt;continue&lt;/h4&gt;
&lt;p&gt;与break相似, continue也能中断程序流, 与break不同的是continue将程序流重定向到块的开始位置&lt;/p&gt;
&lt;h5 id=&#34;不带标签的continue&#34;&gt;不带标签的continue&lt;/h5&gt;
&lt;p&gt;不带标签的continue只能跳到当前循环的首部&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;: 输出100以内除4的倍数外剩下的数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;带标签的continue&#34;&gt;带标签的continue&lt;/h5&gt;
&lt;p&gt;带标签的continue语句可以跳到循环的开始处&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nl&#34;&gt;label:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(...){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(...){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(...){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 和break不同continue并不能用在任意的块上, 只能用在循环语句中.&lt;/p&gt;
&lt;h3 id=&#34;345-循环的嵌套&#34;&gt;3.4.5 循环的嵌套&lt;/h3&gt;
&lt;p&gt;当解决一些复杂问题时常常需要在一次循环中执行另一个循环, 这就是循环的嵌套&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt; 计算1!+2!+... +n!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//For a factorial operation, the result must be initialized to 1,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//because zero is multiplied by any number to get zero
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 这个例子的实现方法显然不够高效, 事实上我们只需要一层循环就可以解决以上问题.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;通过观察我们可以看到

2!=1!*2
3!=2!*3
...
n!=(n-1)!*n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后上面的算法就得到了简化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第二章 变量与运算符</title>
                <link>http://localhost:8080/posts/java/chapter_02/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_02/</guid>
                <pubDate>Fri, 19 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第二章-变量与运算符&#34;&gt;第二章 变量与运算符&lt;/h1&gt;
&lt;h2 id=&#34;21-关键字&#34;&gt;2.1 关键字&lt;/h2&gt;
&lt;p&gt;Java语言中具有特殊意义的单词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于定义数据类型的关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;class interface enum byte short
int long float double boolean
char void
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用于定义数据类型的关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用于控制流的关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if else switch case default
while do for break continue
return&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;访问修饰符&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用于定义类, 方法, 变量修饰符关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;定义类之间关系的关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;实例相关的关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;异常处理相关关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;包相关&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;import&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;native&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;strictfp&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-保留字&#34;&gt;2.2 保留字&lt;/h2&gt;
&lt;p&gt;当前尚未使用, 但以后可能作为关键字使用的单词&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;byValue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;future&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generic&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;23-标识符&#34;&gt;2.3 标识符&lt;/h2&gt;
&lt;h3 id=&#34;231-定义&#34;&gt;2.3.1 定义&lt;/h3&gt;
&lt;p&gt;Java源代码中对各种要素命名时使用的字符序列称为标识符&lt;/p&gt;
&lt;h3 id=&#34;232-标识符规则&#34;&gt;2.3.2 标识符规则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;由英文字母大小写, 数字, 下划线 &lt;code&gt;(_)&lt;/code&gt; 和美元符 &lt;code&gt;($)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不可由数字开头&lt;/li&gt;
&lt;li&gt;不可以使用关键字和保留字&lt;/li&gt;
&lt;li&gt;不限长度&lt;/li&gt;
&lt;li&gt;区别大小写&lt;/li&gt;
&lt;li&gt;不能包含空格&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;24-命名规范&#34;&gt;2.4 命名规范&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包名: 全部小写&lt;/li&gt;
&lt;li&gt;类名和接口名: 每个单词的首字母大写(pascal)&lt;/li&gt;
&lt;li&gt;变量和函数名: 除第一个单词外的每个单词的首字母大写(camel)&lt;/li&gt;
&lt;li&gt;常量名: 所有字母都大写, 每个单词之间由下划线连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-变量&#34;&gt;2.5 变量&lt;/h2&gt;
&lt;h3 id=&#34;251-变量的概念&#34;&gt;2.5.1 变量的概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内存中的一个存储区域&lt;/li&gt;
&lt;li&gt;这个区域有自己的名称和类型&lt;/li&gt;
&lt;li&gt;java中变量必须先声明, 后使用&lt;/li&gt;
&lt;li&gt;该区域的数据可以在同一类型范围内不断变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;252-定义变量的格式&#34;&gt;2.5.2 定义变量的格式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;数据类型&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;变量名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;初始值&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;253-变量的作用域&#34;&gt;2.5.3 变量的作用域&lt;/h3&gt;
&lt;p&gt;一对大括号 &lt;code&gt;{}&lt;/code&gt; 可以定义一段代码块, 在代码块内定义的变量作用域在定义之后, 代码块结束之前一直有效, 代码块可以嵌套, 内部块可以引用外部块中的变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//now variable a is available
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//some codes
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//a new block
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//now variable a is 99
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a=&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//some codes
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// here variable a dose not exist
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;26-数据类型&#34;&gt;2.6 数据类型&lt;/h2&gt;
&lt;h3 id=&#34;261-分类&#34;&gt;2.6.1 分类&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mVCwVO.png&#34; alt=&#34;data_type&#34;&gt;&lt;/p&gt;
&lt;p&gt;java的整数类型都有固定的范围和长度, 和平台无关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型的相关信息表&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;大小&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;默认值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;byte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-128 ~ 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2^15 ~ 2^15-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2^31 ~ 2^31-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.0f&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2^63 ~ 2^63-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.0d&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&#39;\u0000&#39;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&#39;\u0000&#39; ~ &#39;\uffff&#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;boolean值只有两个值逻辑上只需要一位(1bit)即可表示, 但实际上由于处理器字长和内存对齐等因素其真实长度可能在各种jvm中并不一致&lt;/p&gt;
&lt;p&gt;Oracle官方的 Java基本数据类型的介绍 &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html&#34;&gt;Oracle-Java教程-数据类型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;boolean类型的jvm实现 &lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se12/html/jvms-2.html#jvms-2.2&#34;&gt;Oracle-jvms-specs&lt;/a&gt; 详见2.3.4节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;262-类型转换&#34;&gt;2.6.2 类型转换&lt;/h3&gt;
&lt;h4 id=&#34;隐式类型转换&#34;&gt;隐式类型转换&lt;/h4&gt;
&lt;p&gt;自动类型转换的实现需要同时满足两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两种数据类型彼此兼容&lt;/li&gt;
&lt;li&gt;目标类型的取值范围大于源数据类型（低级类型数据转换成高级类型数据）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如: byte 类型向 short 类型转换时，由于 short 类型的取值范围较大，会自动将 byte 转换为 short 类型。&lt;/p&gt;
&lt;p&gt;在运算过程中，由于不同的数据类型会转换成同一种数据类型，所以整型、浮点型以及字符型都可以参与混合运算。自动转换的规则是从低级类型数据转换成高级类型数据。转换规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数值型数据的转换：byte→short→int→long→float→double。&lt;/li&gt;
&lt;li&gt;字符型转换为整型：char→int。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上数据类型的转换遵循从左到右的转换顺序，最终转换成表达式中表示范围最大的变量的数据类型。&lt;/p&gt;
&lt;h4 id=&#34;显式类型转换&#34;&gt;显式类型转换&lt;/h4&gt;
&lt;p&gt;当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换。其语法格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-clike&#34; data-lang=&#34;clike&#34;&gt;(targetType)variableName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，targetType 为 variableName 要转换成的数据类型，而 variableName 是指要进行类型转换的变量名称，强制转换的实例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;27-运算符&#34;&gt;2.7 运算符&lt;/h2&gt;
&lt;h3 id=&#34;271-算术运算符&#34;&gt;2.7.1 算术运算符&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;范例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5+3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;减&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5-3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;乘&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5*3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;除&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15/3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;13/5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt; 奇数性&lt;/p&gt;
&lt;p&gt;下面的方法意图确定它唯一的参数是否时一个奇数, 这个方法能够正常运转吗&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isOdd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;奇数可以被定义为被 2 整除余数为 1 的整数。表达式 i % 2 计算的是 i 整除 2
时所产生的余数，因此看起来这个程序应该能够正确运转。遗憾的是，它不能；
它在四分之一的时间里返回的都是错误的答案。&lt;/p&gt;
&lt;p&gt;为什么是四分之一, 因为int不仅包含正数还不含负数, isOdd在对所有的负奇数的判断都会失败, 任何负整数调用isOdd都会返回false, 不管该整数是奇数还是偶数&lt;/p&gt;
&lt;p&gt;这是由于java对取余操作符的定义造成的, 该操作符被定义为对于所有的 int 数值 a 和所有的非零 int 数值 b，都满足下面的恒等式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;话句话说, 用b整除a的商在乘以b加上余数的和等于a, 所以当取余结果返回一个非零的结果时, 它与左操作数具有相同的正负符号.&lt;/p&gt;
&lt;p&gt;当i是一个负奇数时, i%2等于-1而不是1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;详见&lt;/strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se12/html/jls-15.html#jls-15.17.2&#34;&gt;java-language-specification-15.17.2. Division Operator /&lt;/a&gt;除法定义&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se12/html/jls-15.html#jls-15.17.3&#34;&gt;java-language-specification-15.17.3. Remainder Operator %&lt;/a&gt;取余定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;272-赋值运算符&#34;&gt;2.7.2 赋值运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赋值运算符 &lt;code&gt;=&lt;/code&gt; 是指为变量或者常量指定数值的符号，它是双目运算符，左边的操作数必须是变量，不能是常量或者表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法格式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;变量名称=表达式内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在Java中赋值还可以与一些运算符连用如下&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将该运算符左边的数值加上右边的数值， 其结果赋值给左边变量本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int a=5; a+=2;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a=7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将该运算符左边的数值减去右边的数值， 其结果赋值给左边变量本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int a=5; a-=2;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a=3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将该运算符左边的数值乘以右边的数值， 其结果赋值给左边变量本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int a=5; a*=2;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a=10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将该运算符左边的数值整除右边的数值， 其结果赋值给左边变量本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int a=5; a/=2;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a=2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将该运算符左边的数值除以右边的数值后取余，其结果赋值给左边变量本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int a=5; a%=2;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a=1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;273-条件运算符&#34;&gt;2.7.3 条件运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义
逻辑运算符把各个运算发关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断结果是true或false。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑运算符的用法、含义及示例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;用法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结合方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;op1&amp;amp;&amp;amp;op2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逻辑与&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自左到右&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 &amp;gt; 1&amp;amp;&amp;amp;3 &amp;lt; 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;||&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;op1||op2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逻辑或&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自左到右&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 &amp;lt; 1||3 &amp;gt; 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!op&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逻辑非&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自右到左&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!(2&amp;gt;4)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;真值表&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;op1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;op2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;op1&amp;amp;&amp;amp;op2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;op1||op2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;!op1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;274-关系运算符&#34;&gt;2.7.4 关系运算符&lt;/h3&gt;
&lt;p&gt;关系运算符用来比较两个值的关系&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大于运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&amp;gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大于或等于运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&amp;gt;=2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小于运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 &amp;lt; 3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小于或等于运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&amp;lt;=2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;==&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;相等运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4==4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不相等运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4!=2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关系表达式通常用于Java程序的逻辑判断语句的条件表达式中。使用关系表达式要注意一下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算符 &lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;==&lt;/code&gt;、&lt;code&gt;!=&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt; 是两个字符构成的一个运算符，用空格从中分开写就会产生语法错误。例如 &lt;code&gt;x&amp;gt; =y&lt;/code&gt;; 是错误的，但是可以写成 &lt;code&gt;x&amp;gt;=y&lt;/code&gt;; 在运算符的两侧增加空格会提高可读性。同样将运算符写反，例如 &lt;code&gt;=&amp;gt;&lt;/code&gt;、&lt;code&gt;=&amp;lt;&lt;/code&gt;、&lt;code&gt;=!&lt;/code&gt; 等形式会产生语法错误。&lt;/li&gt;
&lt;li&gt;由于计算机内存放的实数与实际的实数存在着一定的误差，如果对浮点数进行&lt;code&gt;==&lt;/code&gt;（相等）或 &lt;code&gt;!=&lt;/code&gt;（不相等）的比较，容易产生错误结果，应该尽量避免。&lt;/li&gt;
&lt;li&gt;不要将“&lt;code&gt;==&lt;/code&gt;”写成“&lt;code&gt;=&lt;/code&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读&lt;/strong&gt; 浮点数的相等性比较&lt;/p&gt;
&lt;p&gt;因为浮点数的实现特性, 直接比较两个浮点数是否相等并不可靠.&lt;/p&gt;
&lt;p&gt;在实际的应用中, 我们并不关心两个数是否完全相等, 而是在某个可以接受的误差范围内相等即可.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=...;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=...;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0001&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//equal
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码表示浮点数a和浮点数b的差的绝对值小于0.0001就认为他们相等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;275-单目运算符&#34;&gt;2.7.5 单目运算符&lt;/h3&gt;
&lt;p&gt;单目运算符的操作数只有一个&lt;/p&gt;
&lt;p&gt;在对一个变量做加一或减一操作时, 可以使用自增运算符 &lt;code&gt;++&lt;/code&gt; 或自减运算符 &lt;code&gt;--&lt;/code&gt; 。++或--是单目运算符，放在操作数的前面或后面都是允许的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;负&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i++&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将 i 的值先使用再加 1 赋值给 i 变量本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int i=1; int j=i++;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i=2 j=1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;++i&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将 i 的值先加 1 赋值给变量 i 本身后再使用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int i=1; int j=++i;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i=2 j=2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i--&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将 i 的值先使用再减 1 赋值给变量 i 本身&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int i=1; int j=i--;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i=0 j=1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;--i&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将 i 的值先减 1 后赋值给变量 i 本身再使用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int i=1; int j=--i;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i=0 j=0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在使用自增/自减运算时应注意下面几个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自增/自减只能作用于变量，不允许对常量、表达式或其他类型的变量进行操作。常见的错误是试图将自增或自减运算符用于非简单变量表达式中。&lt;/li&gt;
&lt;li&gt;自增/自减运算可以用于整数类型 byte、short、int、long，浮点类型 float、double，以及字符串类型 char。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Java 1.5 以上版本中，自增/自减运算可以用于基本类型对应的包装器类 Byte、Short、Integer、Long、Float、Double 和 Character。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自增/自减运算结果的类型与被运算的变量类型相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;276-位运算符&#34;&gt;2.7.6 位运算符&lt;/h3&gt;
&lt;p&gt;位运算符主要用来对操作数二进制的位进行运算。按位运算表示按每个二进制位(bit)进行计算, 其操作数和运算结果都是整型值&lt;/p&gt;
&lt;h4 id=&#34;位逻辑运算符&#34;&gt;位逻辑运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位进行与运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 &amp;amp; 5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0100 &amp;amp; 0101 = 0100 = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位进行或运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 | 5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0100 | 0101 = 0101 = 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位进行异或运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 ^ 5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0100 ^ 0101 = 0001 = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位进行取反运算&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~ 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~ 0100 = 1111 1111 1111 1111 1111 1111 1111 1011 = -5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;!&amp;gt; &lt;strong&gt;注意&lt;/strong&gt; 上边运算中均为32位int型整数 因为正整数前边均为0所以省略, 负数为反码 已给出32位&lt;/p&gt;
&lt;h4 id=&#34;位移运算符&#34;&gt;位移运算符&lt;/h4&gt;
&lt;p&gt;位移运算符用来将操作数向某个方向（向左或者右）移动指定的二进制位数。它们都属于双目运算符。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;右移位运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8 &amp;gt;&amp;gt; 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;左移位运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9 &amp;lt;&amp;lt; 2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;右移补零运算符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-1&amp;gt;&amp;gt;&amp;gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2147483646&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;右移运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将左操作数的二进制向右移动右操作数的值位, 移出的位丢弃, 高位补&lt;strong&gt;与左操作数符号位相同的数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以8位有符号整数为例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;0101&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0000&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1011&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;1101&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1111&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1011&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;左移运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将左操作数的二进制向左移动右操作数的值位, 移出的位丢弃, 低位补0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;0101&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1110&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0000&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;1101&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1110&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;右移补零运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将左操作数的二进制向右移动右操作数的值位, 移出的位丢弃, 高位补&lt;strong&gt;0&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;0101&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0000&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1011&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;1101&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0001&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1011&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;复合赋值运算符&#34;&gt;复合赋值运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;实例&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位与赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1 &amp;amp;= num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num 1=num 1 &amp;amp; num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位或赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1 |= num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num 1=num 1 | num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位异或赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1 ^= num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num 1=num 1 ^ num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位取反赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1 ~= num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num 1=num 1 ~ num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位左移赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1 &amp;lt;&amp;lt;= num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num 1=num 1 &amp;lt;&amp;lt; num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位右移赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1 &amp;gt;&amp;gt;= num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num 1=num 1 &amp;gt;&amp;gt; num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;按位右移零填充赋值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;num1&amp;gt;&amp;gt;&amp;gt;=num2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;等价于 num1=num1 &amp;gt;&amp;gt;&amp;gt; num2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;277-类型比较运算符&#34;&gt;2.7.7 类型比较运算符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;instanceof&lt;/code&gt; 判断对象是否是某个类的对象&lt;/p&gt;
&lt;h3 id=&#34;278-运算符优先级&#34;&gt;2.7.8 运算符优先级&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;优先级&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;结合性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;() []&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;!、+、-、~、++、--&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从右向左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*、/、%&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+、-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;«、»、&amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;、&amp;lt;=、&amp;gt;、&amp;gt;=、instanceof&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;==、!=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;||&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;?:&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从右向左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;=、+=、-=、*=、/=、&amp;amp;=、|=、^=、~=、&amp;lt;&amp;lt;=、&amp;gt;&amp;gt;=、&amp;gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从右向左&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>[Java笔记]第一章 java历史、特性与JDK的安装</title>
                <link>http://localhost:8080/posts/java/chapter_01/</link>
                <guid isPermaLink="true">http://localhost:8080/posts/java/chapter_01/</guid>
                <pubDate>Mon, 15 Jul 2019 12:19:59 &#43;0800</pubDate>
                
                    <author>jianse@gmail.com (jianse)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;第一章-java历史特性与jdk的安装&#34;&gt;第一章 Java历史、特性与JDK的安装&lt;/h1&gt;
&lt;h2 id=&#34;11-java的历史&#34;&gt;1.1 java的历史&lt;/h2&gt;
&lt;p&gt;詹姆斯·高斯林 （James Gosling）是一名软件专家，1955年5月19日出生于加拿大，Java编程语言的共同创始人之一，一般公认他为“Java之父”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/15/mEv7xf.jpg&#34; alt=&#34;James Gosling&#34;&gt;&lt;/p&gt;
&lt;p&gt;java起源于sun公司的嵌入式项目&lt;/p&gt;
&lt;p&gt;之后sun公司被Oracle公司收购&lt;/p&gt;
&lt;h2 id=&#34;12-java的特性&#34;&gt;1.2 java的特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;跨平台性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;13-jdkjrejvm&#34;&gt;1.3 JDK、JRE、JVM&lt;/h2&gt;
&lt;h3 id=&#34;jdk&#34;&gt;JDK&lt;/h3&gt;
&lt;p&gt;JDK(Java Development Kit)是Java语言的软件开发包，是提供给开发人员的产品，主要包括Java的编译调试工具链、运行时环境、java虚拟机。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[info]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/03/12/8mhOPO.png&#34; alt=&#34;Description of Java Conceptual Diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/tools/tools-and-command-reference.html&#34;&gt;java-11-tools-reference&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常的JDK分为ME、SE、EE三类。&lt;/p&gt;
&lt;p&gt;ME(J2ME)，micro edition，主要用于移动设备、嵌入式设备上的java应用程序，从JDK 5.0开始，改名为Java ME。&lt;/p&gt;
&lt;p&gt;SE(JavaSE)，standard edition，标准版，是我们通常用的一个版本，从JDK 5.0开始，改名为Java SE。&lt;/p&gt;
&lt;p&gt;EE(JavaEE)，enterprise edition，企业版，使用这种JDK开发J2EE应用程序，从JDK 5.0开始，改名为Java EE。从2018年2月26日开始，J2EE改名为Jakarta EE&lt;/p&gt;
&lt;h3 id=&#34;jre&#34;&gt;JRE&lt;/h3&gt;
&lt;p&gt;JRE(Java Runtime Environment)Java运行环境是一个软件，JRE包含了Java提供的标准类库和JVM，是Java程序运行的必要条件。&lt;/p&gt;
&lt;h3 id=&#34;jvm&#34;&gt;JVM&lt;/h3&gt;
&lt;p&gt;JVM(Java Virtual Machine)Java虚拟机，是一个抽象的虚拟计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的，Java虚拟机为java字节码提供了统一的平台，Java语言在不同的平台上不需要重新编译，从而让Java具有了良好的跨平台性。&lt;/p&gt;
&lt;h2 id=&#34;14-java各版本及特性&#34;&gt;1.4 Java各版本及特性&lt;/h2&gt;
&lt;h3 id=&#34;jdk-10&#34;&gt;JDK 1.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Oak&lt;/li&gt;
&lt;li&gt;发行时间：1996-01-23&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初代版本，伟大的一个里程碑，但是是纯解释运行，使用外挂JIT，性能比较差，运行速度慢。&lt;/p&gt;
&lt;h3 id=&#34;jdk-11&#34;&gt;JDK 1.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：无&lt;/li&gt;
&lt;li&gt;发行时间：1997-02-19&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;JDBC(Java DataBase Connectivity)&lt;/li&gt;
&lt;li&gt;支持内部类&lt;/li&gt;
&lt;li&gt;RMI(Remote Method Invocation)&lt;/li&gt;
&lt;li&gt;反射（仅用于内省）&lt;/li&gt;
&lt;li&gt;Java Bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jdk-12&#34;&gt;JDK 1.2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Playground&lt;/li&gt;
&lt;li&gt;发行时间：1998-12-04&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;JIT(Just In Time)编译器&lt;/li&gt;
&lt;li&gt;对打包的Java文件进行签名&lt;/li&gt;
&lt;li&gt;JFC(Java Foundition Classes),包括Swing 1.0，拖放和Java2D类库&lt;/li&gt;
&lt;li&gt;Java插件&lt;/li&gt;
&lt;li&gt;JDBC中引入可滚动结果集，BLOB，CLOB，批量更新和用户自定义类型&lt;/li&gt;
&lt;li&gt;Applet中添加声音支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jdk-13&#34;&gt;JDK 1.3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Kestrel&lt;/li&gt;
&lt;li&gt;发行时间：2000-02-08&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;Java Sound API&lt;/li&gt;
&lt;li&gt;jar文件索引&lt;/li&gt;
&lt;li&gt;大量优化和增强&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jdk-14&#34;&gt;JDK 1.4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Merlin&lt;/li&gt;
&lt;li&gt;发行时间：2004-02-06&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;XML处理&lt;/li&gt;
&lt;li&gt;Java打印服务&lt;/li&gt;
&lt;li&gt;Logging API&lt;/li&gt;
&lt;li&gt;Java Web Start&lt;/li&gt;
&lt;li&gt;JDBC 3.0 API&lt;/li&gt;
&lt;li&gt;断言&lt;/li&gt;
&lt;li&gt;Preferences API&lt;/li&gt;
&lt;li&gt;链式异常处理&lt;/li&gt;
&lt;li&gt;支持IPV6&lt;/li&gt;
&lt;li&gt;支持正则表达式&lt;/li&gt;
&lt;li&gt;引入Image I/O API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-5&#34;&gt;JAVA 5&lt;/h3&gt;
&lt;p&gt;这是Java史上一个里程碑式的版本,为了表示该版本的重要性，J2SE 1.5 更名为JAVA SE 5.0(内部版本1.5.0)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Tiger&lt;/li&gt;
&lt;li&gt;发行时间：2004-09-30&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;范型&lt;/li&gt;
&lt;li&gt;增强循环，可使用迭代方式&lt;/li&gt;
&lt;li&gt;自动装箱与自动拆箱&lt;/li&gt;
&lt;li&gt;类型安全的枚举&lt;/li&gt;
&lt;li&gt;可变参数&lt;/li&gt;
&lt;li&gt;静态引入&lt;/li&gt;
&lt;li&gt;元数据（注解）&lt;/li&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-6&#34;&gt;JAVA 6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号:Mustang&lt;/li&gt;
&lt;li&gt;发行时间：2006-12-11&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;支持脚本语言&lt;/li&gt;
&lt;li&gt;JDBC 4.0 API&lt;/li&gt;
&lt;li&gt;JAVA Compiler API&lt;/li&gt;
&lt;li&gt;可插拔注解&lt;/li&gt;
&lt;li&gt;增加对Native PKI,Java GSS,Kerberos和LDAP支持&lt;/li&gt;
&lt;li&gt;继承Web Services&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-7&#34;&gt;JAVA 7&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Dolphin&lt;/li&gt;
&lt;li&gt;发行时间：2011-07-28&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;switch语句块中允许以字符串作为分支条件&lt;/li&gt;
&lt;li&gt;在创建范型对象时应用类型推断&lt;/li&gt;
&lt;li&gt;在一个语句块中捕获多种异常&lt;/li&gt;
&lt;li&gt;支持动态语言&lt;/li&gt;
&lt;li&gt;支持try-with-resources&lt;/li&gt;
&lt;li&gt;引入Java NIO.2开发包&lt;/li&gt;
&lt;li&gt;数值类型可以用二进制字符串表示，并且可以在字符串表示中添加下划线&lt;/li&gt;
&lt;li&gt;钻石型语法&lt;/li&gt;
&lt;li&gt;null值得自动处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-8&#34;&gt;JAVA 8&lt;/h3&gt;
&lt;p&gt;开发代号自JAVA 8之后不再持续下去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发代号：Spider&lt;/li&gt;
&lt;li&gt;发行时间：2014-03-18&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;Lambda表达式 - Lambda表达式允许把函数作为一个方法的参数&lt;/li&gt;
&lt;li&gt;方法引用 - 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。&lt;/li&gt;
&lt;li&gt;默认方法 - 默认方法就是一个接口里面有了一个实现的方法。&lt;/li&gt;
&lt;li&gt;新工具 - 新的编译工具，如：Nashorn引擎jjs、类依赖分析器jdeps。&lt;/li&gt;
&lt;li&gt;Stream API - 新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。&lt;/li&gt;
&lt;li&gt;Date Time API - 加强对日期与时间的处理。&lt;/li&gt;
&lt;li&gt;Optional 类 - Optional类已经成为Java 8 类库的一部分，用来解决空指针异常。&lt;/li&gt;
&lt;li&gt;Nashorn，JavaScript引擎 - Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的将javascript应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-9&#34;&gt;JAVA 9&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发行时间：2017-09-22&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;模块系统 - 模块是一个包的容器，Java 9最大的变化之一是引入了模块系统（Jigsaw项目）。&lt;/li&gt;
&lt;li&gt;REPL（JShell） - 交互式编成环境&lt;/li&gt;
&lt;li&gt;HTTP 2 客户端 - HTTP/2标准是HTTP协议的最新版本，新的 HTTPClient API 支持 WebSocket 和HTTP2 流以及服务器推送特性。&lt;/li&gt;
&lt;li&gt;改进的 Javadoc - Javadoc 现在支持在 API 文档中的进行搜索。另外，Javadoc 的输出现在符合兼容 HTML5 标准。&lt;/li&gt;
&lt;li&gt;多版本兼容 JAR 包 - 多版本兼容 JAR 功能能让你创建仅在特定版本的 Java 环境中运行库程序时选择使用的 class 版本。&lt;/li&gt;
&lt;li&gt;集合工厂方法 - List，Set 和 Map 接口中，新的静态工厂方法可以创建这些集合的不可变实例。&lt;/li&gt;
&lt;li&gt;私有接口方法 - 在接口中使用private私有方法。我们可以使用 private 访问修饰符在接口中编写私有方法。&lt;/li&gt;
&lt;li&gt;进程 API - 改进的 API 来控制和管理操作系统进程。引进 java.lang.ProcessHandle 及其嵌套接口 Info 来让开发者逃离时常因为要获取一个本地进程的 PID 而不得不使用本地代码的窘境。&lt;/li&gt;
&lt;li&gt;改进的 Stream API - 改进的 Stream API 添加了一些便利的方法，使流处理更容易，并使用收集器编写复杂的查询。&lt;/li&gt;
&lt;li&gt;改进 try-with-resources - 如果你已经有一个资源是 final 或等效于 final 变量,您可以在 try-with-resources 语句中使用该变量，而无需在 try-with-resources 语句中声明一个新变量。&lt;/li&gt;
&lt;li&gt;改进的弃用注解 @Deprecated - 注解 @Deprecated 可以标记 Java API 状态，可以表示被标记的 API 将会被移除，或者已经破坏。&lt;/li&gt;
&lt;li&gt;改进钻石操作符(Diamond Operator) - 匿名类可以使用钻石操作符(Diamond Operator)。&lt;/li&gt;
&lt;li&gt;改进 Optional 类 - java.util.Optional 添加了很多新的有用方法，Optional 可以直接转为 stream。&lt;/li&gt;
&lt;li&gt;多分辨率图像 API - 定义多分辨率图像API，开发者可以很容易的操作和展示不同分辨率的图像了。&lt;/li&gt;
&lt;li&gt;改进的 CompletableFuture API - CompletableFuture 类的异步机制可以在 ProcessHandle.onExit 方法退出时执行操作。&lt;/li&gt;
&lt;li&gt;轻量级的 JSON API - 内置了一个轻量级的JSON API&lt;/li&gt;
&lt;li&gt;响应式流（Reactive Streams) API -  Java 9中引入了新的响应式流 API 来支持 Java 9 中的响应式编程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-10&#34;&gt;JAVA 10&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发行时间：2018-03-21&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;JEP286，var 局部变量类型推断。&lt;/li&gt;
&lt;li&gt;JEP296，将原来用 Mercurial 管理的众多 JDK 仓库代码，合并到一个仓库中，简化开发和管理过程。&lt;/li&gt;
&lt;li&gt;JEP304，统一的垃圾回收接口。&lt;/li&gt;
&lt;li&gt;JEP307，G1 垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。&lt;/li&gt;
&lt;li&gt;JEP310，应用程序类数据 (AppCDS) 共享，通过跨进程共享通用类元数据来减少内存占用空间，和减少启动时间。&lt;/li&gt;
&lt;li&gt;JEP312，ThreadLocal 握手交互。在不进入到全局 JVM 安全点 (Safepoint) 的情况下，对线程执行回调。优化可以只停止单个线程，而不是停全部线程或一个都不停。&lt;/li&gt;
&lt;li&gt;JEP313，移除 JDK 中附带的 javah 工具。可以使用 javac -h 代替。&lt;/li&gt;
&lt;li&gt;JEP314，使用附加的 Unicode 语言标记扩展。&lt;/li&gt;
&lt;li&gt;JEP317，能将堆内存占用分配给用户指定的备用内存设备。&lt;/li&gt;
&lt;li&gt;JEP317，使用 Graal 基于 Java 的编译器，可以预先把 Java 代码编译成本地代码来提升效能。&lt;/li&gt;
&lt;li&gt;JEP318，在 OpenJDK 中提供一组默认的根证书颁发机构证书。开源目前 Oracle 提供的的 Java SE 的根证书，这样 OpenJDK 对开发人员使用起来更方便。&lt;/li&gt;
&lt;li&gt;JEP322，基于时间定义的发布版本，即上述提到的发布周期。版本号为FEATURE.INTERIM.UPDATE.PATCH，分j别是大版本，中间版本，升级包和补丁版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-11&#34;&gt;JAVA 11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发行时间：2018-09-25&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;181:Nest-Based访问控制&lt;/li&gt;
&lt;li&gt;309:动态类文件常量&lt;/li&gt;
&lt;li&gt;315:改善Aarch64 intrinsic&lt;/li&gt;
&lt;li&gt;318:无操作垃圾收集器&lt;/li&gt;
&lt;li&gt;320:消除Java EE和CORBA模块&lt;/li&gt;
&lt;li&gt;321:HTTP客户端(标准)&lt;/li&gt;
&lt;li&gt;323:局部变量的语法λ参数&lt;/li&gt;
&lt;li&gt;324:Curve25519和Curve448关键协议&lt;/li&gt;
&lt;li&gt;327:Unicode 10&lt;/li&gt;
&lt;li&gt;328:飞行记录器&lt;/li&gt;
&lt;li&gt;329:ChaCha20和Poly1305加密算法&lt;/li&gt;
&lt;li&gt;330:发射一列纵队源代码程序&lt;/li&gt;
&lt;li&gt;331:低开销堆分析&lt;/li&gt;
&lt;li&gt;332:传输层安全性(Transport Layer Security,TLS)1.3&lt;/li&gt;
&lt;li&gt;333:动作:一个可伸缩的低延迟垃圾收集器 (实验)&lt;/li&gt;
&lt;li&gt;335:反对Nashorn JavaScript引擎&lt;/li&gt;
&lt;li&gt;336:反对Pack200工具和API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-12&#34;&gt;JAVA 12&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发行时间：2018-09-25&lt;/li&gt;
&lt;li&gt;引入特性：
&lt;ul&gt;
&lt;li&gt;189: Shenandoah: A Low-Pause-Time Garbage Collector (Experimental) ：新增一个名为 Shenandoah 的垃圾回收器，它通过在 Java 线程运行的同时进行疏散 (evacuation) 工作来减少停顿时间。&lt;/li&gt;
&lt;li&gt;230: Microbenchmark Suite：新增一套微基准测试，使开发者能够基于现有的 Java Microbenchmark Harness（JMH）轻松测试 JDK 的性能，并创建新的基准测试。&lt;/li&gt;
&lt;li&gt;325: Switch Expressions (Preview) ：对 switch 语句进行扩展，使其可以用作语句或表达式，简化日常代码。&lt;/li&gt;
&lt;li&gt;334: JVM Constants API ：引入一个 API 来对关键类文件 (key class-file) 和运行时工件的名义描述（nominal descriptions）进行建模，特别是那些可从常量池加载的常量。&lt;/li&gt;
&lt;li&gt;340: One AArch64 Port, Not Two ：删除与 arm64 端口相关的所有源码，保留 32 位 ARM 移植和 64 位 aarch64 移植。&lt;/li&gt;
&lt;li&gt;341: Default CDS Archives ：默认生成类数据共享（CDS）存档。 344: Abortable Mixed Collections for G1 ：当 G1 垃圾回收器的回收超过暂停目标，则能中止垃圾回收过程.346: Promptly Return Unused Committed Memory from G1 ：改进 G1 垃圾回收器，以便在空闲时自动将 Java 堆内存返回给操作系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;15-开发环境搭建&#34;&gt;1.5 开发环境搭建&lt;/h2&gt;
&lt;h3 id=&#34;基本步骤&#34;&gt;基本步骤&lt;/h3&gt;
&lt;p&gt;搭建Java开发环境在各个平台上都是大同小异的，大致包括以下步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载jdk的压缩包，这里选择压缩包是因为安装包是一个黑箱，我们不知道它到底在安装时做了什么不便于我们理解JDK的原理和结构。&lt;/li&gt;
&lt;li&gt;把包含JDK的压缩包解压到你想要放置JDK的目录&lt;/li&gt;
&lt;li&gt;配置环境变量JAVA_HOME，指向刚解压的JDK的根目录。这一步使用配置JAVA_HOME的原因有两个，第一可以在下一步配置PATH时引用JAVA_HOME，当需要改动JDK位置时就可以只改动JAVA_HOME这一个变量达成目的。其二是有一些Java应用启动时会根据JAVA_HOME变量来查找JDK的安装位置。&lt;/li&gt;
&lt;li&gt;配置环境变量PATH。&lt;/li&gt;
&lt;li&gt;命令行运行java和javac确认是否配置正确。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;各平台的安装具体步骤&#34;&gt;各平台的安装具体步骤&lt;/h3&gt;
&lt;p&gt;根据平台和版本不同，JDK的安装有一些细微的差别。下面是Oracle提供的Java SE 安装指南。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A&#34;&gt;Java SE 11 Installation Guide&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;16-编译与运行java程序&#34;&gt;1.6 编译与运行Java程序&lt;/h2&gt;
&lt;h3 id=&#34;单个文件编译运行&#34;&gt;单个文件编译运行&lt;/h3&gt;
&lt;p&gt;首先创建一个&lt;code&gt;Hello.java&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Hello.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译，在命令行下执行（这里我使用的是bash），&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac Hello.java
&lt;span class=&#34;c1&#34;&gt;# 编译完成后查看文件夹下的文件&lt;/span&gt;
ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Hello.class Hello.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到编译产生了&lt;code&gt;Hello.class&lt;/code&gt;字节码文件。&lt;/p&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;java Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要注意这里运行Java程序只需要输入包含Main方法的类名即可，不需要输入文件名。&lt;/p&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;多个文件的编译&#34;&gt;多个文件的编译&lt;/h3&gt;
&lt;p&gt;创建&lt;code&gt;SayHello.java&lt;/code&gt;文件，定义一个&lt;code&gt;sayHello&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// SayHello.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建&lt;code&gt;Hello.java&lt;/code&gt;文件，调用上面的&lt;code&gt;sayHello&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Hello.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命令行下进行编译，你可以分别编译&lt;code&gt;SayHello.java&lt;/code&gt;和&lt;code&gt;Hello.java&lt;/code&gt;两个文件，也可以直接编译&lt;code&gt;Hello.java&lt;/code&gt;Java编译器将自动编译&lt;code&gt;Hello.java&lt;/code&gt;所依赖的类文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[warn]
当你让Java编译器自动寻找依赖进行编译时，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac Hello.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样在当前文件夹下就会生成&lt;code&gt;Hello.class&lt;/code&gt;和&lt;code&gt;SayHello.class&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;包含包结构的java程序编译和运行&#34;&gt;包含包结构的Java程序编译和运行&lt;/h3&gt;
&lt;p&gt;一般的为了更好的组织程序代码，Java使用包来组织代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[info]
包之间并没有父子关系，比如&lt;code&gt;cn.ntboy&lt;/code&gt;与&lt;code&gt;cn.ntboy.sub&lt;/code&gt;，在文件结构上是包含关系，但在Java语言层面上并无包含关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建&lt;code&gt;Hello.java&lt;/code&gt;类文件，这次我们将他放在一个包内&lt;code&gt;cn.ntboy&lt;/code&gt;，所以还要创建两层目录，同时这个类文件的全类名就变成了&lt;code&gt;cn.ntboy.Hello&lt;/code&gt;，这个全类名在我们运行这个程序时会用到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p cn/ntboy
touch cn/ntboy/Hello.java
tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;.
└── cn
    └── ntboy
        └── Hello.java

2 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为&lt;code&gt;Hello.java&lt;/code&gt;添加内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 表示当前类文件所属的包
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.ntboy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译，编译时不指定&lt;code&gt;-classspath&lt;/code&gt;或&lt;code&gt;-cp&lt;/code&gt;选项时，默认以&lt;code&gt;cwd&lt;/code&gt;即当前命令行所在的文件夹为classpath，即在当前文件夹下搜索依赖（Java提供的内置类库除外），所以有两种编译方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在项目的根目录，即包含你刚创建的包目录的目录下进行编译。&lt;/li&gt;
&lt;li&gt;在编译时显式的指明classpath&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假如我刚才的文件就创建在&lt;code&gt;~/java_test&lt;/code&gt;下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在项目根目录编译&lt;/span&gt;
javac cn/ntboy/Hello.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在任意目录编译&lt;/span&gt;
javac -cp &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ~/java_test/&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; ~/java_test/cn/ntboy/Hello.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[info]
上面命令中的&lt;code&gt;echo ~/java_test\&lt;/code&gt;被`包围之后就会先执行，而把执行后的值替换到相应的位置
因为javac不会自动将相对于用户根目录的路径展开&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两种方式的结果是相同的，都会在&lt;code&gt;Hello.java&lt;/code&gt;文件相同的目录下生成&lt;code&gt;Hello.class&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[info]
如果你想把源文件和目标文件分开，还可以指定&lt;code&gt;-d&lt;/code&gt;选项，这个选项指定一个目录来存放生成的目标文件。
更加详细的javac 文档，可以参考&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9&#34;&gt;Java SE 11 Tools Reference - javac&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;运行，相同的运行也可以有两种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在根目录运行&lt;/li&gt;
&lt;li&gt;添加&lt;code&gt;-cp&lt;/code&gt;或&lt;code&gt;-classpath&lt;/code&gt;选项，在任意位置运行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在根目录运行&lt;/span&gt;
java cn.ntboy.Hello

&lt;span class=&#34;c1&#34;&gt;# 在任意位置运行&lt;/span&gt;
java -cp &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ~/java_test/&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; cn.ntboy.Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[info]
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE&#34;&gt;java 命令详细文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;jar包相关的java程序运行&#34;&gt;Jar包相关的Java程序运行&lt;/h3&gt;
&lt;h4 id=&#34;什么是jar包&#34;&gt;什么是JAR包&lt;/h4&gt;
&lt;p&gt;Jar(Java Archive)Java归档文件是一种软件包文件格式，通常用作归档聚合大量的Java类文件、相关的元数据和资源文件到一个文件，以便于分发。&lt;/p&gt;
&lt;h4 id=&#34;创建一个jar包&#34;&gt;创建一个JAR包&lt;/h4&gt;
&lt;p&gt;我们选择将&lt;a href=&#34;http://localhost:8080/posts/java/chapter_01/#%E5%8C%85%E5%90%AB%E5%8C%85%E7%BB%93%E6%9E%84%E7%9A%84java%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8C&#34;&gt;上面提到的例子&lt;/a&gt;打包成一个jar包，首先我们将项目生成到一个独立的文件夹下，以便我们打包时可以不受源文件的影响。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 不用担心目标目录是否创建，因为javac会为你创建&lt;/span&gt;
javac -cp &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ~/java_test/&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; ~/java_test/cn/ntboy/Hello.java -d ~/java_test/target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后JDK提供的jar命令进行打包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 移动到目标文件夹&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/java_test/target

&lt;span class=&#34;c1&#34;&gt;# 打包&lt;/span&gt;
jar -cvf hello.jar *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[info]
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/tools/jar.html#GUID-51C11B76-D9F6-4BC2-A805-3C847E857867&#34;&gt;jar 命令详细文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;added manifest
adding: cn/(in = 0) (out= 0)(stored 0%)
adding: cn/ntboy/(in = 0) (out= 0)(stored 0%)
adding: cn/ntboy/Hello.class(in = 319) (out= 237)(deflated 25%)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;运行一个jar包&#34;&gt;运行一个JAR包&lt;/h4&gt;
&lt;p&gt;上面打好的Jar包并不能直接运行，因为我们还没有指定程序的入口点。我们有两种方式指定程序的入口点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;manifest文件&lt;/li&gt;
&lt;li&gt;-e或--main-class 选项&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# manifest文件&lt;/span&gt;
touch manifest.mf
jar cvfm hello.jar manifest.mf cn/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;manifest.mf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mf&#34; data-lang=&#34;mf&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Main-Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;ntboy&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[warn]
manifest.mf文件必须以一个空行结束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -e选项&lt;/span&gt;
jar -cvfe cn.ntboy.Hello cn/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行jar&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;java -jar hello.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;依赖于外部jar包的程序编译&#34;&gt;依赖于外部JAR包的程序编译&lt;/h4&gt;
&lt;p&gt;创建一个Jar包，包含一个类，&lt;code&gt;SayHello&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.ntboy.say&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac cn/ntboy/say/SayHello -d target
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; target
jar cf say.jar *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们有&lt;code&gt;say.jar&lt;/code&gt;了，我们想在一个新的类&lt;code&gt;Hello&lt;/code&gt;里面调用&lt;code&gt;sayHello&lt;/code&gt;这个方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cn.ntboy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ntboy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在这个类依赖于一个外部Jar包（&lt;code&gt;say.jar&lt;/code&gt;）里面的一个类。所以编译时要在classpath里面包含这个jar包，才可以编译。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;javac -cp &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ~/java_test/target/say.jar&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; cn/ntboy/Hello.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;依赖jar包的程序运行&#34;&gt;依赖JAR包的程序运行&lt;/h4&gt;
&lt;p&gt;接上，刚编译的&lt;code&gt;Hello.class&lt;/code&gt;依赖于&lt;code&gt;say.jar&lt;/code&gt;，所以运行时也需要把&lt;code&gt;say.jar&lt;/code&gt;加入&lt;code&gt;classpath&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 合并多个classpath，并用冒号隔开&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;cp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;`echo ~/java_test/target/say.jar`:`echo ~/java_test/`&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 运行程序&lt;/span&gt;
java -cp &lt;span class=&#34;nv&#34;&gt;$cp&lt;/span&gt; cn.ntboy.Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[info]
多个classpath要用分隔符分开，在linux平台上要用冒号(&lt;code&gt;:&lt;/code&gt;)，而在windows平台上要用分号(&lt;code&gt;;&lt;/code&gt;)隔开。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;17-集成开发环境&#34;&gt;1.7 集成开发环境&lt;/h2&gt;
&lt;p&gt;集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。&lt;/p&gt;
&lt;h3 id=&#34;eclipse&#34;&gt;eclipse&lt;/h3&gt;
&lt;p&gt;Eclipse 是一个开放源代码的、基于Java的可扩展开发平台。就其本身而言，它只是一个框架和一组服务，用于通过插件组件构建开发环境。&lt;/p&gt;
&lt;h3 id=&#34;netbeans&#34;&gt;netbeans&lt;/h3&gt;
&lt;p&gt;NetBeans是Sun公司（2009年被甲骨文收购）在2000年创立的开放源代码供开发人员和客户社区的家园，旨在构建世界级的Java IDE。NetBeans当前可以在Solaris、Windows、Linux和Macintosh OS X平台上进行开发，并在SPL(Sun公用许可)范围内使用。&lt;/p&gt;
&lt;h3 id=&#34;intellij-idea&#34;&gt;IntelliJ IDEA&lt;/h3&gt;
&lt;p&gt;DEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Python等少数语言。&lt;/p&gt;
&lt;h3 id=&#34;android-studio&#34;&gt;Android Studio&lt;/h3&gt;
&lt;p&gt;由Google开发的主要针对Android应用程序，它已经证明与Java编码相当优秀。它对支持Google服务和设备相当顺滑。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="http://localhost:8080/categories/javase/">javase</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
